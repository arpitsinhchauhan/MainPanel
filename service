
  getFormattedDate(reportDate: Date): string {
    const year = reportDate.getFullYear();
    const month = String(reportDate.getMonth() + 1).padStart(2, '0');
    const day = String(reportDate.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
  

  getOneDayAgoStock(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_UGADTO_STOCK, { params }); 
  }


  getOillsellList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_OIL, { params }); 
  }

  getTransactionList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_TRANSACTION, { params }); 
  }

  getKharchList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_KHARCH, { params }); 
  }


  getJamaBakiList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_JAMA_BAKI, { params }); 
  }


  getPurchaseiList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_PURCHASE, { params }); 
  }

  getDipList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_DIP, { params }); 
  }

  savefuleData(petrolData: any[], dieselData: any[]): Observable<any> {
    const payload = {
      petrolInputData: petrolData,
      dieselInputData: dieselData
    };

    return this.http.post(API_SAVE_FUEL_REPORT, payload);
  }

//Main
export const API_UGADTO_STOCK: string = `${prefix}/portal/api/oneDayAgoUgadtoStock`;
export const API_OIL: string = `${prefix}/portal/api/OilList`;
export const API_TRANSACTION: string = `${prefix}/portal/api/transaction`;
export const API_KHARCH: string = `${prefix}/portal/api/kharch`;
export const API_JAMA_BAKI: string = `${prefix}/portal/api/jamabaki`;
export const API_PURCHASE: string = `${prefix}/portal/api/purchase`;
export const API_DIP: string = `${prefix}/portal/api/dip`;
export const API_SAVE_FUEL_REPORT: string = `${prefix}/portal/api/saveFuelReport`;


//backend
 @GetMapping("/oneDayAgoUgadtoStock")
    public Map<String, Object> getOneDayAgoUgadtoStock(@RequestParam String date, @RequestParam String userId) {
        Map<String, Object> response = new HashMap<>();
        List<Dailystock> petrol = dailyskockRepository.findDataForOneDayAgo(date, userId);
        List<dailydieselstock> diesel = dailydieselstockRepository.findDataForOneDayAgo(date, userId);
        Dailystock petrolData = petrol.isEmpty() ? null : petrol.get(0);
        dailydieselstock dieselData = diesel.isEmpty() ? null : diesel.get(0);

        response.put("petrol", petrolData != null ? petrolData.getOpenstock() : null);
        response.put("diesel", dieselData != null ? dieselData.getDieselopenstock() : null);
        return response;
    }

-->@Query(value = "SELECT * FROM dailystock WHERE date = DATE_SUB(:date, INTERVAL 1 DAY) AND (:user_id IS NULL OR user_id = :user_id)", nativeQuery = true)
    List<Dailystock> findDataForOneDayAgo(@Param("date") String date, @Param("user_id") String userId);
-->@Query(value = "SELECT * FROM dailydieselstock WHERE date = DATE_SUB(?1, INTERVAL 1 DAY) AND user_id = ?2", nativeQuery = true)
    List<dailydieselstock> findDataForOneDayAgo(String date, String userId);


    @GetMapping(value = "/OilList")
    public   List<OilSell> getOilsell(@RequestParam String date, @RequestParam String userId) {
        List<OilSell> rawData = oilSellRepository.getoilData(date, userId);
        return rawData;
    }

-->@Query("SELECT SUM(t1.price) AS total_price FROM OilSell t1 WHERE t1.date = :date AND t1.userId = :userId")
    List<OilSell> getoilData(@Param("date") String date, @Param("userId") String userId);

    @GetMapping(value = "/transaction")
    public   List<transaction> getTransaction(@RequestParam String date, @RequestParam String userId) {
        List<transaction> transaction = transactionRepository.gettransation(date, userId);
        return transaction;
    }

--> @Query("SELECT  SUM(t.amount) FROM transaction t WHERE t.date = :date AND t.userId = :userId")
    List<transaction> gettransation(@Param("date") String date, @Param("userId") String userId);

    @GetMapping(value = "/kharch")
    public   List<kharch> getkharch(@RequestParam String date, @RequestParam String userId) {
        List<kharch> kharch = kharchrepository.getkharch(date, userId);
        return kharch;
    }

-->@Query("SELECT SUM(k.price) FROM kharch k WHERE k.date = :date AND k.userId = :userId")
    List<kharch> getkharch(@Param("date") String date, @Param("userId") String userId);

    @GetMapping(value = "/jamabaki")
    public List<jamabaki> getjamabaki(@RequestParam String date, @RequestParam String userId) {
        List<jamabaki> jamabaki = JamabakiRepository.getjamabaki(date, userId);
        return jamabaki;
    }

-->@Query("SELECT SUM(j.jama), SUM(j.baki) FROM jamabaki j WHERE j.date = :date AND j.userId = :userId")
    List<jamabaki> getjamabaki(@Param("date") String date, @Param("userId") String userId);

    @GetMapping(value = "/purchase")
    public List<Purchase> getPurchase(@RequestParam String date, @RequestParam String userId) {
        List<Purchase> purchase = purchaseRepository.getPurchase(date, userId);
        return purchase;
    }
-->@Query("SELECT t1.Quantity FROM Purchase t1 WHERE t1.date = :date AND t1.userId = :userId")
    List<Purchase> getPurchase(@Param("date") String date, @Param("userId") String userId);

    @GetMapping(value = "/dip")
    public List<DipStock> getDip(@RequestParam String date, @RequestParam String userId) {
        List<DipStock> dip = dipStockRepository.getDipData(date, userId);
        return dip;
    }

-->@Query("SELECT d.dieseldip,d.dvalue, d.petroldip,d.pvalue FROM DipStock d WHERE d.userId = :userId AND d.date = :date")
    List<DipStock> getDipData(@Param("date") String date, @Param("userId") String userId);

    @PostMapping("/saveFuelReport")
    public ResponseEntity<String> saveFuelData(@RequestBody Map<String, Object> payload) {
        List<Map<String, Object>> petrolData = (List<Map<String, Object>>) payload.get("petrolInputData");
        List<Map<String, Object>> dieselData = (List<Map<String, Object>>) payload.get("dieselInputData");

        try {
            // Save Petrol Data
            List<PetrolSell> petrolEntities = petrolData.stream()
                    .map(data -> {
                        PetrolSell petrol = new PetrolSell();
                        petrol.setDate((String) data.get("date"));
                        petrol.setUserId((String) data.get("user_id"));
                        petrol.setPump((String) data.get("pump"));
                        petrol.setOpen_meter((String) data.get("open_meter"));
                        petrol.setClose_meter((String) data.get("close_meter"));
                        petrol.setTesting((String) data.get("testing"));
                        petrol.setRate((String) data.get("rate"));
                        petrol.setTotal((String) data.get("total"));
                        petrol.setTotal_sell((String) data.get("total_sell"));
                        petrol.setPetrol_ltr((String) data.get("petrol_ltr"));
                        return petrol;
                    })
                    .collect(Collectors.toList());
            petrolSellRepository.saveAll(petrolEntities);

            // Save Diesel Data
            List<Dieselsell> dieselEntities = dieselData.stream()
                    .map(data -> {
                        Dieselsell diesel = new Dieselsell();
                        diesel.setDate((String) data.get("date"));
                        diesel.setUserId((String) data.get("user_id"));
                        diesel.setPump((String) data.get("pump"));
                        diesel.setOpen_meter((String) data.get("open_meter"));
                        diesel.setClose_meter((String) data.get("close_meter"));
                        diesel.setTesting((String) data.get("testing"));
                        diesel.setRate((String) data.get("rate"));
                        diesel.setTotal((String) data.get("total"));
                        diesel.setTotal_sell((String) data.get("total_sell"));
                        diesel.setDiesel_ltr((String) data.get("diesel_ltr"));
                        return diesel;
                    })
                    .collect(Collectors.toList());
            dieselSellRepository.saveAll(dieselEntities);

            return ResponseEntity.ok("Data saved successfully!");
        } catch (Exception e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Failed to save fuel data: " + e.getMessage());
        }
    }



/////////////////////////////////////////


  getPetrolList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_Petrol, { params }); 
  }

  getDieselList(date: string, userId: string):Observable<any> {
    const params = new HttpParams()
      .set('date', date)
      .set('userId', userId);

    return this.http.get<any>(API_DIESEL, { params }); 
  }

  getUserName(userId: string):Observable<any> {
    const params = new HttpParams()
      .set('userId', userId);

    return this.http.get<any>(API_USER_NAME, { params }); 
  }

}

export const API_Petrol: string = `${prefix}/portal/api/petrolList`;
export const API_DIESEL: string = `${prefix}/portal/api/dieselList`;
export const API_USER_NAME: string = `${prefix}/portal/api/userName`;

//////////////////////////

    //PETROL SELL
    @GetMapping(value = "/petrolList")
    public List<PetrolSell> getPetrolSell(@RequestParam String date,@RequestParam String userId) {
        List<PetrolSell> petrol = petrolSellRepository.findByDateAndUserId(date,userId);
        return petrol;
    }

    @GetMapping(value = "/dieselList")
    public List<Dieselsell> getDieselSell(@RequestParam String date,@RequestParam String userId) {
        List<Dieselsell> Diesel = dieselSellRepository.findByDateAndUserId(date,userId);
        return Diesel;
    }

    @GetMapping(value = "/userName")
    public ResponseEntity<ApiResponse> getUserName(@RequestParam Long userId) {
        String userName = userRepository.getUserDataForDate(userId);

        if (userName != null) {
            return ResponseEntity.ok(new ApiResponse(userName));
        } else {
            return ResponseEntity.ok(new ApiResponse("User not found"));
        }
    }

@PostMapping("/saveFuelReport")
public ResponseEntity<ApiResponse> saveFuelData(@RequestBody Map<String, Object> payload) {
    List<Map<String, Object>> petrolData = (List<Map<String, Object>>) payload.get("petrolInputData");
    List<Map<String, Object>> dieselData = (List<Map<String, Object>>) payload.get("dieselInputData");

    if (petrolData.isEmpty() && dieselData.isEmpty()) {
        ApiResponse response = new ApiResponse("No data to save.");
        return ResponseEntity.ok(response);
    }
    try {
        // 🚀 **Save or Update Petrol Data**
        List<PetrolSell> petrolEntities = petrolData.stream()
                .map(data -> {
                            String date = (String) data.get("date");
                            String userId = (String) data.get("user_id");
                            String pump = (String) data.get("pump");
                    Optional<PetrolSell> existingPetrol = petrolSellRepository.findByDateAndPumpAndUserId(date, pump, userId);

                    PetrolSell petrol;
                    if (existingPetrol.isPresent()) {
                        petrol = existingPetrol.get();
                        // If present, update values
                        petrol.setOpen_meter((String) data.get("open_meter"));
                        petrol.setClose_meter((String) data.get("close_meter"));
                        petrol.setTesting((String) data.get("testing"));
                        petrol.setRate((String) data.get("rate"));
                        petrol.setTotal((String) data.get("total"));
                        petrol.setTotal_sell((String) data.get("total_sell"));
                        petrol.setPetrol_ltr((String) data.get("petrol_ltr"));
                    } else {
                        petrol = new PetrolSell();
                        petrol.setDate(date);
                        petrol.setUserId(userId);
                        petrol.setPump(pump);
                        petrol.setOpen_meter((String) data.get("open_meter"));
                        petrol.setClose_meter((String) data.get("close_meter"));
                        petrol.setTesting((String) data.get("testing"));
                        petrol.setRate((String) data.get("rate"));
                        petrol.setTotal((String) data.get("total"));
                        petrol.setTotal_sell((String) data.get("total_sell"));
                        petrol.setPetrol_ltr((String) data.get("petrol_ltr"));
                    }
                    return petrol;
                })
                .collect(Collectors.toList());
        petrolSellRepository.saveAll(petrolEntities);

        List<Dieselsell> dieselEntities = dieselData.stream()
                .map(data -> {
                    String date = (String) data.get("date");
                    String userId = (String) data.get("user_id");
                    String pump = (String) data.get("pump");

                    // 🔍 Check if data already exists for date and pump
                    Optional<Dieselsell> existingDiesel = dieselSellRepository.findByDateAndPumpAndUserId(date, pump, userId);

                    Dieselsell diesel;
                    if (existingDiesel.isPresent()) {
                        diesel = existingDiesel.get();
                        // If present, update values
                        diesel.setOpen_meter((String) data.get("open_meter"));
                        diesel.setClose_meter((String) data.get("close_meter"));
                        diesel.setTesting((String) data.get("testing"));
                        diesel.setRate((String) data.get("rate"));
                        diesel.setTotal((String) data.get("total"));
                        diesel.setTotal_sell((String) data.get("total_sell"));
                        diesel.setDiesel_ltr((String) data.get("diesel_ltr"));
                    } else {
                        // If not present, create new
                        diesel = new Dieselsell();
                        diesel.setDate(date);
                        diesel.setUserId(userId);
                        diesel.setPump(pump);
                        diesel.setOpen_meter((String) data.get("open_meter"));
                        diesel.setClose_meter((String) data.get("close_meter"));
                        diesel.setTesting((String) data.get("testing"));
                        diesel.setRate((String) data.get("rate"));
                        diesel.setTotal((String) data.get("total"));
                        diesel.setTotal_sell((String) data.get("total_sell"));
                        diesel.setDiesel_ltr((String) data.get("diesel_ltr"));
                    }
                    return diesel;
                })
                .collect(Collectors.toList());
        dieselSellRepository.saveAll(dieselEntities);
        ApiResponse response = new ApiResponse("Data saved/updated successfully!");
        return ResponseEntity.ok(response);
    } catch (Exception e) {
        ApiResponse response = new ApiResponse("Failed to save fuel data: " + e.getMessage());
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }
}


