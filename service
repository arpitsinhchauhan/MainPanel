<!-- data-display.component.html -->
<div class="row">
   <div class="col-sm-12 col-md-12 col-lg-12 col-xl-12">
      <div class="card">
         <div class="card-header card-header-danger">
            <h4 class="card-title">Pump Excel Details :-</h4>
         </div>
         <div class="card-body" style="overflow: scroll;">
            <div *ngIf="productList.length > 0">
               <button (click)="exportToExcel()">Export to Excel</button>
               <table>
                  <tr>
                     <th>Date</th>
                     <th>Petrol Total Sum</th>
                     <th>Petrol Rate</th>
                     <th>Petrol Total Sell</th>
                     <th>Petrol Gatt</th>
                     <th>Diesel Total Sum</th>
                     <th>Diesel Rate</th>
                     <th>Diesel Total Sell</th>
                     <th>Diesel Gatt</th>
                     <th>Oil Total Price</th>
                     <th>Kharch Total</th>
                     <th>Petrol Quantity</th>
                     <th>Petrol Total</th>
                     <th>Petrol Vat</th>
                     <th>Petrol Cess</th>
                     <th>Petrol Jtcpercentage</th>
                     <th>Petrol Total Purchase</th>
                     <th>Diesel Quantity</th>
                     <th>Diesel Total</th>
                     <th>Diesel Vat</th>
                     <th>Diesel Cess</th>
                     <th>Diesel Jtcpercentage</th>
                     <th>Diesel Total Purchase</th>
                     <th>ATM Total</th>
                     <th>Jama Total</th>
                     <th>Baki Total</th>
                     <th *ngFor="let header of expenseHeaders">{{ header }}</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total Sum</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Rate</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total Sell</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Gatt</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total Sum</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Rate</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total Sell</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Gatt</th>
                     <!-- ✅ New XP Petrol Purchase -->
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Quantity</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol VAT</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol CESS</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol JTC%</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total Purchase</th>
                     <!-- ✅ New Power Diesel Purchase -->
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Quantity</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel VAT</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel CESS</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel JTC%</th>
                     <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total Purchase</th>
                  </tr>
                  <tr *ngFor="let item of productList">
                     <td>{{ item.date }}</td>
                     <td>{{ item.petrolTotalSum }}</td>
                     <td>{{ item.petrolRate }}</td>
                     <td>{{ item.petrolTotalTotalSell }}</td>
                     <td>{{ item.petrolgatt_Total }}</td>
                     <td>{{ item.dieselTotalSum }}</td>
                     <td>{{ item.dieselRate }}</td>
                     <td>{{ item.dieselTotalTotalSell }}</td>
                     <td>{{ item.dieselgatt_Total }}</td>
                     <td>{{ item.oilTotalPrice }}</td>
                     <td>{{ item.kharchTotal }}</td>
                     <td>{{ item.petrolQuantity }}</td>
                     <td>{{ item.petrolTotal }}</td>
                     <td>{{ item.petrolVat }}</td>
                     <td>{{ item.petrolCess }}</td>
                     <td>{{ item.petrolJtcpercentage }}</td>
                     <td>{{ item.petrolTotalPurchase }}</td>
                     <td>{{ item.dieselQuantity }}</td>
                     <td>{{ item.dieselTotal }}</td>
                     <td>{{ item.dieselVat }}</td>
                     <td>{{ item.dieselCess }}</td>
                     <td>{{ item.dieselJtcpercentage }}</td>
                     <td>{{ item.dieselTotalPurchase }}</td>
                     <td>{{ item.amountTotal }}</td>
                     <td>{{ item.jamaTotal }}</td>
                     <td>{{ item.bakiTotal }}</td>
                     <td *ngFor="let header of expenseHeaders">
                        {{ item.expenseMap[header] || 0 }}
                     </td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotalSum }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolRate }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotalSell }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolgatt_Total }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotalSum }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselRate }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotalSell }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.power_dieselgatt_Total }}</td>
                     <!-- ✅ New XP Petrol Purchase -->
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolQuantity }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotal }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolVat }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolCess }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolJtcpercentage }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotalPurchase }}</td>
                     <!-- ✅ New Power Diesel Purchase -->
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselQuantity }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotal }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselVat }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselCess }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselJtcpercentage }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotalPurchase }}</td>
                  </tr>
                  <tr>
                     <td></td>
                     <td>{{ totalPetrolSum }}</td>
                     <td></td>
                     <td>{{ totalPetroltotalsum }}</td>
                     <td></td>
                     <td>{{ totalDieselsum }}</td>
                     <td></td>
                     <td>{{ totalDieseltotalSum }}</td>
                     <td></td>
                     <td>{{ totalOilTotalPrice }}</td>
                     <td>{{ totalKharchTotal }}</td>
                     <td>{{ totalPetrolQuantity }}</td>
                     <td>{{ totalPetrolTotal }}</td>
                     <td>{{ totalPetrolVat }}</td>
                     <td>{{ totalPetrolCess }}</td>
                     <td>{{ totalPetrolJtcpercentage }}</td>
                     <td>{{ totalPetrolTotalPurchase }}</td>
                     <td>{{ totalDieselQuantity }}</td>
                     <td>{{ totalDieselTotal }}</td>
                     <td>{{ totalDieselVat }}</td>
                     <td>{{ totalDieselCess }}</td>
                     <td>{{ totalDieselJtcpercentage }}</td>
                     <td>{{ totalDieselTotalPurchase }}</td>
                     <td>{{ totalAmountTotal }}</td>
                     <td>{{ totalJamaTotal }}</td>
                     <td>{{ totalBakiTotal }}</td>
                     <!-- XP Petrol Totals -->
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotalSum }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotalSell }}</td>
                     <td></td>
                     <!-- Power Diesel Totals -->
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotalSum }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotalSell }}</td>
                     <td></td>
                     <!-- XP Petrol Purchase Totals -->
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolQuantity }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotal }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolVat }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolCess }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolJtcpercentage }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotalPurchase }}</td>
                     <!-- Power Diesel Purchase Totals -->
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselQuantity }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotal }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselVat }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselCess }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselJtcpercentage }}</td>
                     <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotalPurchase }}</td>
                  </tr>
               </table>
            </div>
            <div *ngIf="productList.length === 0">
               No data available.
            </div>
         </div>
      </div>
   </div>
</div>

import { HttpClient, HttpParams } from "@angular/common/http";
import { Component, Inject, OnInit } from "@angular/core";
import { MAT_DIALOG_DATA, MatDialog } from "@angular/material/dialog";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { API_AGGREGATED_DATA } from "app/serviceult";
import { UserServiceService } from "app/services/user-service.service";
import { AggregatedDataDTO } from "app/models/AggregatedDataDTO";

@Component({
  selector: "app-pump-detail",
  templateUrl: "./pump-detail.component.html",
  styleUrls: ["./pump-detail.component.css"],
})
export class PumpDetailComponent implements OnInit {
  // productList: any = [];
  startDate: string;
  totalPetrolSum: number = 0;
  endDate: string;
  combinedSummary: any[] = [];
  productList: AggregatedDataDTO[] = [];
  expenseHeaders: any[] = [];
  totalPetroltotalsum: number = 0;
  totalDieselsum: number = 0;
  totalDieseltotalSum: number = 0;
  totalOilTotalPrice: number = 0;
  totalKharchTotal: number = 0;
  totalPetrolQuantity: number = 0;
  totalPetrolTotal: number = 0;
  totalPetrolVat: number = 0;
  totalPetrolCess: number = 0;
  totalPetrolJtcpercentage: number = 0;
  totalPetrolTotalPurchase: number = 0;
  totalDieselQuantity: number = 0;
  totalDieselTotal: number = 0;
  totalDieselVat: number = 0;
  totalDieselCess: number = 0;
  totalDieselJtcpercentage: number = 0;
  totalDieselTotalPurchase: number = 0;
  totalAmountTotal: number = 0;
  totalJamaTotal: number = 0;
  totalBakiTotal: number = 0;
  // XP Petrol Totals
  totalXpPetrolTotalSum: number = 0;
  totalXpPetrolTotalSell: number = 0;
  totalXpPetrolQuantity: number = 0;
  totalXpPetrolTotal: number = 0;
  totalXpPetrolVat: number = 0;
  totalXpPetrolCess: number = 0;
  totalXpPetrolJtcpercentage: number = 0;
  totalXpPetrolTotalPurchase: number = 0;

  // Power Diesel Totals
  totalPowerDieselTotalSum: number = 0;
  totalPowerDieselTotalSell: number = 0;
  totalPowerDieselQuantity: number = 0;
  totalPowerDieselTotal: number = 0;
  totalPowerDieselVat: number = 0;
  totalPowerDieselCess: number = 0;
  totalPowerDieselJtcpercentage: number = 0;
  totalPowerDieselTotalPurchase: number = 0;
  xp_petrol_nozzle: number;
  powe_diesel_nozzle: number;
  userId = localStorage.getItem("userId");

  constructor(
    private http: HttpClient,
    private use: UserServiceService,
    private dialog: MatDialog,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {
    this.startDate = data.startDate;
    this.endDate = data.endDate;
  }

  ngOnInit(): void {
    this.getPurchase();
    this.getUserName();
  }

  getUserName() {
    this.use.getUserNameAndNozzle(this.userId).subscribe((data) => {
      this.xp_petrol_nozzle = Number(data.data.xp_petrol_nozzle);
      this.powe_diesel_nozzle = Number(data.data.powe_diesel_nozzle);
    });
  }

  getPurchase() {
    const userId = localStorage.getItem("userId");
    const params = new HttpParams()
      .set("startDate", this.startDate.toString().split("T")[0])
      .set("endDate", this.endDate.toString().split("T")[0])
      .set("userId", userId);

    this.http
      .get<AggregatedDataDTO[]>(API_AGGREGATED_DATA, { params })
      .subscribe(
        (data) => {
          // build headers (unique expense names)
          this.expenseHeaders = this.getUniqueExpenseHeaders(data);

          // add expenseMap for quick lookup
          this.productList = data.map(item => ({
            ...item,
            expenseMap: this.buildExpenseMap(item.expensesList)
          }));

          this.calculateTotals();
        },
        (error) => {
          console.error("Error fetching data:", error);
        }
      );
  }

  getUniqueExpenseHeaders(data: any[]): string[] {
    const headers = new Set<string>();
    data.forEach(item => {
      if (Array.isArray(item.expensesList)) {
        item.expensesList.forEach((exp: any) => headers.add(exp.expenses));
      }
    });
    return Array.from(headers);
  }

  // Build a map: { "ASSOSIASAN FEE EXP": 10800, "BANK INTEREST": 2000, ... }
  buildExpenseMap(expensesList: any[]): { [key: string]: number } {
    const map: { [key: string]: number } = {};
    if (!Array.isArray(expensesList)) return map;
    expensesList.forEach(exp => {
      map[exp.expenses] = Number(exp.total_price ?? 0);
    });
    return map;
  }

  // Optional: Keep a function so template call won't break
  public getExpenseValue(expensesList: any[], header: string): number {
    if (!Array.isArray(expensesList)) return 0;
    const exp = expensesList.find(e => e.expenses === header);
    return exp ? Number(exp.total_price) : 0;
  }

  calculateTotals() {
    this.totalPetrolSum = this.productList.reduce((sum, item) => {
      return sum + item.petrolTotalSum;
    }, 0);
    this.totalPetroltotalsum = this.productList.reduce(
      (sum, item) => sum + item.petrolTotalTotalSell,
      0
    );
    this.totalDieselsum = this.productList.reduce(
      (sum, item) => sum + item.dieselTotalSum,
      0
    );
    this.totalDieseltotalSum = this.productList.reduce(
      (sum, item) => sum + item.dieselTotalTotalSell,
      0
    );

    this.totalOilTotalPrice = this.productList.reduce(
      (sum, item) => sum + item.oilTotalPrice,
      0
    );
    this.totalKharchTotal = this.productList.reduce(
      (sum, item) => sum + item.kharchTotal,
      0
    );
    this.totalPetrolQuantity = this.productList.reduce(
      (sum, item) => sum + item.petrolQuantity,
      0
    );
    this.totalPetrolTotal = this.productList.reduce(
      (sum, item) => sum + item.petrolTotal,
      0
    );
    this.totalPetrolVat = this.productList.reduce(
      (sum, item) => sum + item.petrolVat,
      0
    );
    this.totalPetrolCess = this.productList.reduce(
      (sum, item) => sum + item.petrolCess,
      0
    );
    this.totalPetrolJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.petrolJtcpercentage,
      0
    );
    this.totalPetrolTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.petrolTotalPurchase,
      0
    );
    this.totalDieselQuantity = this.productList.reduce(
      (sum, item) => sum + item.dieselQuantity,
      0
    );
    this.totalDieselTotal = this.productList.reduce(
      (sum, item) => sum + item.dieselTotal,
      0
    );
    this.totalDieselVat = this.productList.reduce(
      (sum, item) => sum + item.dieselVat,
      0
    );
    this.totalDieselCess = this.productList.reduce(
      (sum, item) => sum + item.dieselCess,
      0
    );
    this.totalDieselJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.dieselJtcpercentage,
      0
    );
    this.totalDieselTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.dieselTotalPurchase,
      0
    );
    this.totalAmountTotal = this.productList.reduce(
      (sum, item) => sum + item.amountTotal,
      0
    );
    this.totalJamaTotal = this.productList.reduce(
      (sum, item) => sum + item.jamaTotal,
      0
    );
    this.totalBakiTotal = this.productList.reduce(
      (sum, item) => sum + item.bakiTotal,
      0
    );
    this.totalXpPetrolTotalSum = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotalSum,
      0
    );
    this.totalXpPetrolTotalSell = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotalSell,
      0
    );
    this.totalXpPetrolQuantity = this.productList.reduce(
      (sum, item) => sum + item.xppetrolQuantity,
      0
    );
    this.totalXpPetrolTotal = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotal,
      0
    );
    this.totalXpPetrolVat = this.productList.reduce(
      (sum, item) => sum + item.xppetrolVat,
      0
    );
    this.totalXpPetrolCess = this.productList.reduce(
      (sum, item) => sum + item.xppetrolCess,
      0
    );
    this.totalXpPetrolJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.xppetrolJtcpercentage,
      0
    );
    this.totalXpPetrolTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotalPurchase,
      0
    );

    // Power Diesel totals
    this.totalPowerDieselTotalSum = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotalSum,
      0
    );
    this.totalPowerDieselTotalSell = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotalSell,
      0
    );
    this.totalPowerDieselQuantity = this.productList.reduce(
      (sum, item) => sum + item.powerdieselQuantity,
      0
    );
    this.totalPowerDieselTotal = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotal,
      0
    );
    this.totalPowerDieselVat = this.productList.reduce(
      (sum, item) => sum + item.powerdieselVat,
      0
    );
    this.totalPowerDieselCess = this.productList.reduce(
      (sum, item) => sum + item.powerdieselCess,
      0
    );
    this.totalPowerDieselJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.powerdieselJtcpercentage,
      0
    );
    this.totalPowerDieselTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotalPurchase,
      0
    );
  }

  exportToExcel(): void {
    const includeXpAndPower = this.xp_petrol_nozzle > 0 || this.powe_diesel_nozzle > 0;

    // ✅ Create rows with flat expense columns
    const dataForExcel = this.productList.map(item => {
      const row: any = { ...item };

      // Expand expensesList into separate columns
      if (item.expensesList) {
        item.expensesList.forEach((exp: any) => {
          row[exp.expenses] = exp.total_price; // e.g. row["ASSOSIASAN FEE EXP"] = 10800
        });
      }

      return row;
    });

    // ✅ Create totals row with same structure
    const totalsRow: any = {
      date: "Total",
      petrolTotalTotalSell: this.totalPetroltotalsum,
      dieselTotalSum: this.totalDieselsum,
      dieselTotalTotalSell: this.totalDieseltotalSum,
      oilTotalPrice: this.totalOilTotalPrice,
      kharchTotal: this.totalKharchTotal,
      petrolQuantity: this.totalPetrolQuantity,
      petrolTotal: this.totalPetrolTotal,
      petrolVat: this.totalPetrolVat,
      petrolCess: this.totalPetrolCess,
      petrolJtcpercentage: this.totalPetrolJtcpercentage,
      petrolTotalPurchase: this.totalPetrolTotalPurchase,
      dieselVat: this.totalDieselVat,
      dieselCess: this.totalDieselCess,
      dieselJtcpercentage: this.totalDieselJtcpercentage,
      dieselTotalPurchase: this.totalDieselTotalPurchase,
      amountTotal: this.totalAmountTotal,
      jamaTotal: this.totalJamaTotal,
      bakiTotal: this.totalBakiTotal
    };

    // Add expense totals into totals row
    this.expenseHeaders.forEach(header => {
      totalsRow[header] = this.productList.reduce((sum, item) => {
        const match = item.expensesList?.find((exp: any) => exp.expenses === header);
        return sum + (match ? match.total_price : 0);
      }, 0);
    });

    const dataWithTotals = [...dataForExcel, totalsRow];

    // ✅ Dynamically create header order (including expense columns)
    const headerOrder = [
      "date", "petrolTotalSum", "petrolRate", "petrolTotalTotalSell", "petrolgatt_Total",
      "dieselTotalSum", "dieselRate", "dieselTotalTotalSell", "dieselgatt_Total", "oilTotalPrice", "kharchTotal",
      "petrolQuantity", "petrolTotal", "petrolVat", "petrolCess", "petrolJtcpercentage",
      "petrolTotalPurchase", "dieselQuantity", "dieselTotal", "dieselVat", "dieselCess",
      "dieselJtcpercentage", "dieselTotalPurchase", "amountTotal", "jamaTotal", "bakiTotal",
      ...this.expenseHeaders // <-- dynamically add expense columns
    ];

    // ✅ Generate worksheet
    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(dataWithTotals, {
      header: headerOrder,
    });

    const workbook: XLSX.WorkBook = {
      Sheets: { data: worksheet },
      SheetNames: ["data"],
    };

    XLSX.writeFile(workbook, "ProductList.xlsx");
  }


}


export interface AggregatedDataDTO {
  expenseMap: any;
  expensesList: any;
  date: string;
  petrolTotalSum: number;
  petrolTotalTesting: number;
  petrolLtr: number;
  petrolRate: number;
  petrolTotalTotalSell: number;
  dieselTotalSum: number;
  dieselTotalTesting: number;
  dieselLtr: number;
  dieselRate: number;
  dieselTotalTotalSell: number;
  oilTotalPrice: number;
  kharchTotal: number;
  petrolQuantity: number;
  petrolTotal: number;
  petrolVat: number;
  petrolCess: number;
  petrolJtcpercentage: number;
  petrolTotalPurchase: number;
  dieselQuantity: number;
  dieselTotal: number;
  dieselVat: number;
  dieselCess: number;
  dieselJtcpercentage: number;
  dieselTotalPurchase: number;
  amountTotal: number;
  jamaTotal: number;
  bakiTotal: number;
  xppetrolLtr: number;
  xppetrolTotalSum: number;
  xppetrolTotalTesting: number;
  xppetrolTotalSell: number;

  powerdieselLtr: number;
  powerdieselTotalSum: number;
  powerdieselTotalTesting: number;
  powerdieselTotalSell: number;

  // ✅ New XP Petrol purchase fields
  xppetrolQuantity: number;
  xppetrolTotal: number;
  xppetrolVat: number;
  xppetrolCess: number;
  xppetrolJtcpercentage: number;
  xppetrolTotalPurchase: number;

  // ✅ New Power Diesel purchase fields
  powerdieselQuantity: number;
  powerdieselTotal: number;
  powerdieselVat: number;
  powerdieselCess: number;
  powerdieselJtcpercentage: number;
  powerdieselTotalPurchase: number;


  petrolgatt: number;
  dieselgatt: number;
  xppetrolgatt: number;
  power_dieselgatt: number;
}


 //Daily Report
    @GetMapping("/aggregated-data-alldata")
    public List<AggregatedDataDTO> getAggregatedData(
            @RequestParam String startDate,
            @RequestParam String endDate,
            @RequestParam String userId) {

        UserNozzleDTO userData = userRepository.getUserData(Long.parseLong(userId));

        boolean includeXpPetrol = userData != null
                && parseIntSafe(userData.getXp_petrol_nozzle()) > 0;

        boolean includePowerDiesel = userData != null
                && parseIntSafe(userData.getPowe_diesel_nozzle()) > 0;
        List<Map<String, Object>> myobj = queryThis(startDate, endDate, userId);

        List<Object[]> expensesList = kharchrepository.getExpenseSummary(startDate,endDate, userId);

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        List<AggregatedDataDTO> result = new ArrayList<>();
        for (Map<String, Object> map : myobj) {
            AggregatedDataDTO dto = new AggregatedDataDTO();
            dto.setDate((String) map.get("date"));
            Object dateObj = map.get("date");
            if (dateObj != null) {
                if (dateObj instanceof Date) {
                    dto.setDate(sdf.format((Date) dateObj));
                } else {
                    try {
                        // Try parsing if it's a string from DB (e.g., yyyy-MM-dd or yyyy-MM-dd HH:mm:ss)
                        Date parsed = new SimpleDateFormat("yyyy-MM-dd").parse(dateObj.toString());
                        dto.setDate(sdf.format(parsed));
                    } catch (ParseException e) {
                        dto.setDate(dateObj.toString()); // fallback in case parsing fails
                    }
                }
            }

            dto.setPetrolTotalSum(convertToDouble(map.get("petrol_total_sum")));
//            dto.setPetrolTotalTesting(convertToDouble(map.get("petrol_total_testing")));
//            dto.setPetrolLtr(convertToDouble(map.get("petrol_ltr")));
            dto.setPetrolRate(convertToDouble(map.get("petrol_rate")));
            dto.setPetrolTotalTotalSell(convertToDouble(map.get("petrol_total_total_sell")));
            dto.setPetrolgatt_Total(convertToDouble(map.get("petrolgatt_Total")));

            dto.setDieselTotalSum(convertToDouble(map.get("diesel_total_sum")));
//            dto.setDieselTotalTesting(convertToDouble(map.get("diesel_total_testing")));
//            dto.setDieselLtr(convertToDouble(map.get("diesel_ltr")));
            dto.setDieselRate(convertToDouble(map.get("diesel_rate")));
            dto.setDieselTotalTotalSell(convertToDouble(map.get("diesel_total_total_sell")));
            dto.setDieselgatt_Total(convertToDouble(map.get("dieselgatt_Total")));

            dto.setOilTotalPrice(convertToDouble(map.get("oil_total_price")));
            dto.setKharchTotal(convertToDouble(map.get("Kharch_Total")));
            dto.setPetrolQuantity(convertToDouble(map.get("Petrol_Quantity")));
            dto.setPetrolTotal(convertToDouble(map.get("Petrol_Total")));
            dto.setPetrolVat(convertToDouble(map.get("Petrol_Vat")));
            dto.setPetrolCess(convertToDouble(map.get("Petrol_Cess")));
            dto.setPetrolJtcpercentage(convertToDouble(map.get("Petrol_Jtcpercentage")));
            dto.setPetrolTotalPurchase(convertToDouble(map.get("Petrol_Total_purchase")));
            dto.setDieselQuantity(convertToDouble(map.get("Diesel_Quantity")));
            dto.setDieselTotal(convertToDouble(map.get("Diesel_Total")));
            dto.setDieselVat(convertToDouble(map.get("Diesel_Vat")));
            dto.setDieselCess(convertToDouble(map.get("Diesel_Cess")));
            dto.setDieselJtcpercentage(convertToDouble(map.get("Diesel_Jtcpercentage")));
            dto.setDieselTotalPurchase(convertToDouble(map.get("Diesel_Total_Purchase")));
            dto.setAmountTotal(convertToDouble(map.get("Amount_Total")));
            dto.setJamaTotal(convertToDouble(map.get("Jama_Total")));
            dto.setBakiTotal(convertToDouble(map.get("Baki_Total")));
//            dto.setUser_id((String) map.get("user_id"));
            if (includeXpPetrol) {
//                dto.setXppetrolLtr(convertToDouble(map.get("xppetrol_ltr")));
                dto.setXppetrolTotalSum(convertToDouble(map.get("xppetrol_total_sum")));
                dto.setXppetrolRate(convertToDouble(map.get("xppetrol_rate"))); 
//                dto.setXppetrolTotalTesting(convertToDouble(map.get("xppetrol_total_testing")));
                dto.setXppetrolTotalSell(convertToDouble(map.get("xppetrol_total_sell")));
                dto.setXppetrolgatt_Total(convertToDouble(map.get("xppetrolgatt_Total")));
                
                // XP Petrol Purchase fields
                dto.setXppetrolQuantity(convertToDouble(map.get("xppetrol_quantity")));
                dto.setXppetrolTotal(convertToDouble(map.get("xppetrol_total")));
                dto.setXppetrolVat(convertToDouble(map.get("xppetrol_vat")));
                dto.setXppetrolCess(convertToDouble(map.get("xppetrol_cess")));
                dto.setXppetrolJtcpercentage(convertToDouble(map.get("xppetrol_jtcpercentage")));
                dto.setXppetrolTotalPurchase(convertToDouble(map.get("xppetrol_total_purchase")));
            }

            if (includePowerDiesel) {
//                dto.setPowerdieselLtr(convertToDouble(map.get("powerdiesel_ltr")));
                dto.setPowerdieselTotalSum(convertToDouble(map.get("powerdiesel_total_sum")));
                dto.setPowerdieselRate(convertToDouble(map.get("powerdiesel_rate")));
//                dto.setPowerdieselTotalTesting(convertToDouble(map.get("powerdiesel_total_testing")));
                dto.setPowerdieselTotalSell(convertToDouble(map.get("powerdiesel_total_sell")));
                dto.setPowerdieselTotalSell(convertToDouble(map.get("powerdiesel_total_sell")));
                dto.setPower_dieselgatt_Total(convertToDouble(map.get("power_dieselgatt_Total")));
// Power Diesel Purchase fields
                dto.setPowerdieselQuantity(convertToDouble(map.get("powerdiesel_quantity")));
                dto.setPowerdieselTotal(convertToDouble(map.get("powerdiesel_total")));
                dto.setPowerdieselVat(convertToDouble(map.get("powerdiesel_vat")));
                dto.setPowerdieselCess(convertToDouble(map.get("powerdiesel_cess")));
                dto.setPowerdieselJtcpercentage(convertToDouble(map.get("powerdiesel_jtcpercentage")));
                dto.setPowerdieselTotalPurchase(convertToDouble(map.get("powerdiesel_total_purchase")));
            }
            dto.setExpensesList(
                    expensesList.stream()
                            .filter(obj -> {
                                String dbDateStr;
                                Object dbDateObj = obj[0];

                                // ✅ Safely convert to dd-MM-yyyy string
                                if (dbDateObj instanceof Date) {
                                    dbDateStr = new SimpleDateFormat("dd-MM-yyyy").format((Date) dbDateObj);
                                } else {
                                    try {
                                        // DB returned string (likely yyyy-MM-dd)
                                        Date parsed = new SimpleDateFormat("yyyy-MM-dd").parse(dbDateObj.toString());
                                        dbDateStr = new SimpleDateFormat("dd-MM-yyyy").format(parsed);
                                    } catch (ParseException e) {
                                        dbDateStr = dbDateObj.toString(); // fallback
                                    }
                                }

                                return dbDateStr.equals(dto.getDate());
                            })
                            .map(obj -> {
                                Map<String, Object> map2 = new HashMap<>();
                                map2.put("expenses", obj[1]);      // obj[1] = expenses
                                map2.put("total_price", obj[2]);  // obj[2] = total_price
                                return map2;
                            })
                            .collect(Collectors.toList())
            );



            result.add(dto);
        }
        return result;
    }

    private Double convertToDouble(Object value) {
        if (value == null) {
            return null;
        }
        if (value instanceof Number) {
            return ((Number) value).doubleValue();
        }
        try {
            return Double.parseDouble(value.toString());
        } catch (NumberFormatException e) {
            return null; // or handle the error as needed
        }
    }

    private Integer convertToInteger(Object value) {
        if (value == null) {
            return null;
        }
        if (value instanceof Number) {
            return ((Number) value).intValue();
        }
        try {
            return Integer.parseInt(value.toString());
        } catch (NumberFormatException e) {
            return null; // or handle the error as needed
        }
    }

    private List<Map<String, Object>> queryThis(String startDate, String endDate, String userId) {
        String sql = "SELECT "
                + "p.date, "
                + "COALESCE(p.total_sum, 0) AS petrol_total_sum, "
                + "COALESCE(p.total_testing, 0) AS petrol_total_testing, "
                + "COALESCE(p.petrol_ltr, 0) AS petrol_ltr, "
                + "COALESCE(p.rate, 0) AS petrol_rate, "
                + "COALESCE(p.total_total_sell, 0) AS petrol_total_total_sell, "
                + "COALESCE(d.total_sum, 0) AS diesel_total_sum, "
                + "COALESCE(d.total_testing, 0) AS diesel_total_testing, "
                + "COALESCE(d.diesel_ltr, 0) AS diesel_ltr, "
                + "COALESCE(d.rate, 0) AS diesel_rate, "
                + "COALESCE(d.total_total_sell, 0) AS diesel_total_total_sell, "
                + "COALESCE(pg.petrolgatt_Total, 0) AS petrolgatt_Total, "
                + "COALESCE(dg.dieselgatt_Total, 0) AS dieselgatt_Total, "

                // xppetrol
                + "COALESCE(xp.xppetrol_ltr, 0) AS xppetrol_ltr, "
                + "COALESCE(xp.total_sum, 0) AS xppetrol_total_sum, "
                + "COALESCE(xp.rate, 0) AS xppetrol_rate, "
                + "COALESCE(xp.total_testing, 0) AS xppetrol_total_testing, "
                + "COALESCE(xp.total_sell, 0) AS xppetrol_total_sell, "
                + "COALESCE(xpg.xppetrolgatt_Total, 0) AS xppetrolgatt_Total, "
                // powerdiesel
                + "COALESCE(pd.powerdiesel_ltr, 0) AS powerdiesel_ltr, "
                + "COALESCE(pd.total_sum, 0) AS powerdiesel_total_sum, "
                + "COALESCE(pd.rate, 0) AS powerdiesel_rate, "
                + "COALESCE(pd.total_testing, 0) AS powerdiesel_total_testing, "
                + "COALESCE(pd.total_sell, 0) AS powerdiesel_total_sell, "
                + "COALESCE(pdg.power_dieselgatt_Total, 0) AS power_dieselgatt_Total, "
                
                + "COALESCE(o.total_price, 0) AS oil_total_price, "
                + "COALESCE(k.Kharch_Total, 0) AS Kharch_Total, "
                + "COALESCE(pp.petrol_quantity, 0) AS Petrol_Quantity, "
                + "COALESCE(pp.petrol_total, 0) AS Petrol_Total, "
                + "COALESCE(pp.petrol_vat, 0) AS Petrol_Vat, "
                + "COALESCE(pp.petrol_cess, 0) AS Petrol_Cess, "
                + "COALESCE(pp.petrol_jtcpercentage, 0) AS Petrol_Jtcpercentage, "
                + "COALESCE(pp.petrol_total_purchase, 0) AS Petrol_Total_Purchase, "
                + "COALESCE(dp.diesel_quantity, 0) AS Diesel_Quantity, "
                + "COALESCE(dp.diesel_total, 0) AS Diesel_Total, "
                + "COALESCE(dp.diesel_vat, 0) AS Diesel_Vat, "
                + "COALESCE(dp.diesel_cess, 0) AS Diesel_Cess, "
                + "COALESCE(dp.diesel_jtcpercentage, 0) AS Diesel_Jtcpercentage, "
                + "COALESCE(dp.diesel_total_purchase, 0) AS Diesel_Total_Purchase, "
                + "COALESCE(t.Amount_Total, 0) AS Amount_Total, "
                + "COALESCE(j.Jama_Total, 0) AS Jama_Total, "
                + "COALESCE(j.Baki_Total, 0) AS Baki_Total, "
                //Xp
                + "COALESCE(xpp.xppetrol_quantity, 0) AS xppetrol_quantity, "
                + "COALESCE(xpp.xppetrol_total, 0) AS xppetrol_total, "
                + "COALESCE(xpp.xppetrol_cess, 0) AS xppetrol_cess, "
                + "COALESCE(xpp.xppetrol_jtcpercentage, 0) AS xppetrol_jtcpercentage, "
                + "COALESCE(xpp.xppetrol_total_purchase, 0) AS xppetrol_total_purchase, "
                + "COALESCE(xpp.xppetrol_vat, 0) AS xppetrol_vat, "
                //Power
                + "COALESCE(pdp.powerdiesel_quantity, 0) AS powerdiesel_quantity, "
                + "COALESCE(pdp.powerdiesel_total, 0) AS powerdiesel_total, "
                + "COALESCE(pdp.powerdiesel_cess, 0) AS powerdiesel_cess, "
                + "COALESCE(pdp.powerdiesel_jtcpercentage, 0) AS powerdiesel_jtcpercentage, "
                + "COALESCE(pdp.powerdiesel_total_purchase, 0) AS powerdiesel_total_purchase, "
                + "COALESCE(pdp.powerdiesel_vat, 0) AS powerdiesel_vat "
                + "FROM "
                + "(SELECT "
                + "date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(total) AS total_sum, "
                + "SUM(testing) AS total_testing, "
                + "SUM(petrol_ltr) AS petrol_ltr, "
                + "rate, "
                + "SUM(total_sell) AS total_total_sell "
                + "FROM "
                + "managment.petrolsell "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) p "
                + "JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(total) AS total_sum, "
                + "SUM(testing) AS total_testing, "
                + "SUM(diesel_ltr) AS diesel_ltr, "
                + "rate, "
                + "SUM(total_sell) AS total_total_sell "
                + "FROM "
                + "managment.dieselsell "
                + "WHERE "
                + "date BETWEEN  '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) d "
                + "ON "
                + "p.date = d.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(price) AS total_price "
                + "FROM "
                + "managment.OilSell "
                + "WHERE "
                + "date BETWEEN  '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) o "
                + "ON "
                + "p.date = o.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(price) AS Kharch_Total "
                + "FROM "
                + "managment.kharch "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) k "
                + "ON "
                + "p.date = k.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, type, "
                + "quantity AS petrol_quantity, "
                + "total AS petrol_total, "
                + "vat AS petrol_vat, "
                + "cess AS petrol_cess, "
                + "jtcpercentage AS petrol_jtcpercentage, "
                + "total_purchase AS petrol_total_purchase "
                + "FROM "
                + "managment.purchase "
                + "WHERE "
                + "type = 'petrol' AND user_id = '" + userId + "') pp " // Filter by userId
                + "ON "
                + "p.date = pp.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(amount) AS Amount_Total "
                + "FROM "
                + "managment.transaction "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) t "
                + "ON "
                + "p.date = t.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, type, "
                + "quantity AS diesel_quantity, "
                + "total AS diesel_total, "
                + "vat AS diesel_vat, "
                + "cess AS diesel_cess, "
                + "jtcpercentage AS diesel_jtcpercentage, "
                + "total_purchase AS diesel_total_purchase "
                + "FROM "
                + "managment.purchase "
                + "WHERE "
                + "type = 'diesel'  AND user_id = '" + userId + "') dp " // Filter by userId
                + "ON "
                + "d.date = dp.date "
                + "LEFT JOIN ("
                + "SELECT date, "
                + "extra_cess AS xppetrol_cess, "
                + "extra_jtcpercentage AS xppetrol_jtcpercentage, "
                + "extra_quantity AS xppetrol_quantity, "
                + "extra_total AS xppetrol_total, "
                + "extra_total_purchase AS xppetrol_total_purchase, "
                + "extra_vat AS xppetrol_vat "
                + "FROM managment.extrapurchases "
                + "WHERE extra_type = 'XP Petrol' "
                + "AND user_id = '" + userId + "' "
                + "AND date BETWEEN '" + startDate + "' AND '" + endDate + "'"
                + ") xpp ON p.date = xpp.date "
                + "LEFT JOIN ("
                + "SELECT date, "
                + "extra_cess AS powerdiesel_cess, "
                + "extra_jtcpercentage AS powerdiesel_jtcpercentage, "
                + "extra_quantity AS powerdiesel_quantity, "
                + "extra_total AS powerdiesel_total, "
                + "extra_total_purchase AS powerdiesel_total_purchase, "
                + "extra_vat AS powerdiesel_vat "
                + "FROM managment.extrapurchases "
                + "WHERE extra_type = 'Power Diesel' "
                + "AND user_id = '" + userId + "' "
                + "AND date BETWEEN '" + startDate + "' AND '" + endDate + "'"
                + ") pdp ON p.date = pdp.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(jama) AS Jama_Total, "
                + "SUM(baki) AS Baki_Total "
                + "FROM "
                + "managment.jamabakireport "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) j "
                + "ON "
                + " p.date = j.date "
                + "LEFT JOIN (SELECT date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(xppetrol_ltr) AS xppetrol_ltr, "
                + "SUM(testing) AS total_testing, "
                + "SUM(total) AS total_sum, "
                + "SUM(total_sell) AS total_sell, "
                + "rate "
                + "FROM managment.xppetrol "
                + "WHERE date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date) xp ON p.date = xp.date "
                // ✅ LEFT JOIN powerdiesel
                + "LEFT JOIN (SELECT date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(powerdiesel_ltr) AS powerdiesel_ltr, "
                + "SUM(testing) AS total_testing, "
                + "SUM(total) AS total_sum, "
                + "SUM(total_sell) AS total_sell, "
                + "rate "
                + "FROM managment.powerdiesel "
                + "WHERE date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date) pd ON p.date = pd.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(petrolgatt) AS petrolgatt_Total "
                + "FROM "
                + "managment.petrolgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) pg "
                + "ON "
                + "p.date = pg.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(dieselgatt) AS dieselgatt_Total "
                + "FROM "
                + "managment.dieselgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) dg "
                + "ON "
                + "p.date = dg.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(xppetrolgatt) AS xppetrolgatt_Total "
                + "FROM "
                + "managment.xppetrolgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) xpg "
                + "ON "
                + "p.date = xpg.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(power_dieselgatt) AS power_dieselgatt_Total "
                + "FROM "
                + "managment.powerdieselgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) pdg "
                + "ON "
                + "p.date = pdg.date "

                + "LEFT JOIN (SELECT "
                + "date, "
                + "SUM(price) AS Kharch_Total "   // ✅ Removed `expenses` from SELECT
                + "FROM "
                + "managment.kharch "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date) ep "           // ✅ Removed `expenses` from GROUP BY
                + "ON p.date = ep.date "



                + "ORDER BY "
                + "p.date;";

        return jdbcTemplate.queryForList(sql);
    }



 //Daily Report
    @GetMapping("/aggregated-data-alldata")
    public List<AggregatedDataDTO> getAggregatedData(
            @RequestParam String startDate,
            @RequestParam String endDate,
            @RequestParam String userId) {

        UserNozzleDTO userData = userRepository.getUserData(Long.parseLong(userId));

        boolean includeXpPetrol = userData != null
                && parseIntSafe(userData.getXp_petrol_nozzle()) > 0;

        boolean includePowerDiesel = userData != null
                && parseIntSafe(userData.getPowe_diesel_nozzle()) > 0;
        List<Map<String, Object>> myobj = queryThis(startDate, endDate, userId);

        List<Object[]> expensesList = kharchrepository.getExpenseSummary(startDate,endDate, userId);

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        List<AggregatedDataDTO> result = new ArrayList<>();
        for (Map<String, Object> map : myobj) {
            AggregatedDataDTO dto = new AggregatedDataDTO();
            dto.setDate((String) map.get("date"));
            Object dateObj = map.get("date");
            if (dateObj != null) {
                if (dateObj instanceof Date) {
                    dto.setDate(sdf.format((Date) dateObj));
                } else {
                    try {
                        // Try parsing if it's a string from DB (e.g., yyyy-MM-dd or yyyy-MM-dd HH:mm:ss)
                        Date parsed = new SimpleDateFormat("yyyy-MM-dd").parse(dateObj.toString());
                        dto.setDate(sdf.format(parsed));
                    } catch (ParseException e) {
                        dto.setDate(dateObj.toString()); // fallback in case parsing fails
                    }
                }
            }

            dto.setPetrolTotalSum(convertToDouble(map.get("petrol_total_sum")));
//            dto.setPetrolTotalTesting(convertToDouble(map.get("petrol_total_testing")));
//            dto.setPetrolLtr(convertToDouble(map.get("petrol_ltr")));
            dto.setPetrolRate(convertToDouble(map.get("petrol_rate")));
            dto.setPetrolTotalTotalSell(convertToDouble(map.get("petrol_total_total_sell")));
            dto.setPetrolgatt_Total(convertToDouble(map.get("petrolgatt_Total")));

            dto.setDieselTotalSum(convertToDouble(map.get("diesel_total_sum")));
//            dto.setDieselTotalTesting(convertToDouble(map.get("diesel_total_testing")));
//            dto.setDieselLtr(convertToDouble(map.get("diesel_ltr")));
            dto.setDieselRate(convertToDouble(map.get("diesel_rate")));
            dto.setDieselTotalTotalSell(convertToDouble(map.get("diesel_total_total_sell")));
            dto.setDieselgatt_Total(convertToDouble(map.get("dieselgatt_Total")));

            dto.setOilTotalPrice(convertToDouble(map.get("oil_total_price")));
            dto.setKharchTotal(convertToDouble(map.get("Kharch_Total")));
            dto.setPetrolQuantity(convertToDouble(map.get("Petrol_Quantity")));
            dto.setPetrolTotal(convertToDouble(map.get("Petrol_Total")));
            dto.setPetrolVat(convertToDouble(map.get("Petrol_Vat")));
            dto.setPetrolCess(convertToDouble(map.get("Petrol_Cess")));
            dto.setPetrolJtcpercentage(convertToDouble(map.get("Petrol_Jtcpercentage")));
            dto.setPetrolTotalPurchase(convertToDouble(map.get("Petrol_Total_purchase")));
            dto.setDieselQuantity(convertToDouble(map.get("Diesel_Quantity")));
            dto.setDieselTotal(convertToDouble(map.get("Diesel_Total")));
            dto.setDieselVat(convertToDouble(map.get("Diesel_Vat")));
            dto.setDieselCess(convertToDouble(map.get("Diesel_Cess")));
            dto.setDieselJtcpercentage(convertToDouble(map.get("Diesel_Jtcpercentage")));
            dto.setDieselTotalPurchase(convertToDouble(map.get("Diesel_Total_Purchase")));
            dto.setAmountTotal(convertToDouble(map.get("Amount_Total")));
            dto.setJamaTotal(convertToDouble(map.get("Jama_Total")));
            dto.setBakiTotal(convertToDouble(map.get("Baki_Total")));
//            dto.setUser_id((String) map.get("user_id"));
            if (includeXpPetrol) {
//                dto.setXppetrolLtr(convertToDouble(map.get("xppetrol_ltr")));
                dto.setXppetrolTotalSum(convertToDouble(map.get("xppetrol_total_sum")));
                dto.setXppetrolRate(convertToDouble(map.get("xppetrol_rate"))); 
//                dto.setXppetrolTotalTesting(convertToDouble(map.get("xppetrol_total_testing")));
                dto.setXppetrolTotalSell(convertToDouble(map.get("xppetrol_total_sell")));
                dto.setXppetrolgatt_Total(convertToDouble(map.get("xppetrolgatt_Total")));
                
                // XP Petrol Purchase fields
                dto.setXppetrolQuantity(convertToDouble(map.get("xppetrol_quantity")));
                dto.setXppetrolTotal(convertToDouble(map.get("xppetrol_total")));
                dto.setXppetrolVat(convertToDouble(map.get("xppetrol_vat")));
                dto.setXppetrolCess(convertToDouble(map.get("xppetrol_cess")));
                dto.setXppetrolJtcpercentage(convertToDouble(map.get("xppetrol_jtcpercentage")));
                dto.setXppetrolTotalPurchase(convertToDouble(map.get("xppetrol_total_purchase")));
            }

            if (includePowerDiesel) {
//                dto.setPowerdieselLtr(convertToDouble(map.get("powerdiesel_ltr")));
                dto.setPowerdieselTotalSum(convertToDouble(map.get("powerdiesel_total_sum")));
                dto.setPowerdieselRate(convertToDouble(map.get("powerdiesel_rate")));
//                dto.setPowerdieselTotalTesting(convertToDouble(map.get("powerdiesel_total_testing")));
                dto.setPowerdieselTotalSell(convertToDouble(map.get("powerdiesel_total_sell")));
                dto.setPowerdieselTotalSell(convertToDouble(map.get("powerdiesel_total_sell")));
                dto.setPower_dieselgatt_Total(convertToDouble(map.get("power_dieselgatt_Total")));
// Power Diesel Purchase fields
                dto.setPowerdieselQuantity(convertToDouble(map.get("powerdiesel_quantity")));
                dto.setPowerdieselTotal(convertToDouble(map.get("powerdiesel_total")));
                dto.setPowerdieselVat(convertToDouble(map.get("powerdiesel_vat")));
                dto.setPowerdieselCess(convertToDouble(map.get("powerdiesel_cess")));
                dto.setPowerdieselJtcpercentage(convertToDouble(map.get("powerdiesel_jtcpercentage")));
                dto.setPowerdieselTotalPurchase(convertToDouble(map.get("powerdiesel_total_purchase")));
            }
            dto.setExpensesList(
                    expensesList.stream()
                            .filter(obj -> {
                                String dbDateStr;
                                Object dbDateObj = obj[0];

                                // ✅ Safely convert to dd-MM-yyyy string
                                if (dbDateObj instanceof Date) {
                                    dbDateStr = new SimpleDateFormat("dd-MM-yyyy").format((Date) dbDateObj);
                                } else {
                                    try {
                                        // DB returned string (likely yyyy-MM-dd)
                                        Date parsed = new SimpleDateFormat("yyyy-MM-dd").parse(dbDateObj.toString());
                                        dbDateStr = new SimpleDateFormat("dd-MM-yyyy").format(parsed);
                                    } catch (ParseException e) {
                                        dbDateStr = dbDateObj.toString(); // fallback
                                    }
                                }

                                return dbDateStr.equals(dto.getDate());
                            })
                            .map(obj -> {
                                Map<String, Object> map2 = new HashMap<>();
                                map2.put("expenses", obj[1]);      // obj[1] = expenses
                                map2.put("total_price", obj[2]);  // obj[2] = total_price
                                return map2;
                            })
                            .collect(Collectors.toList())
            );



            result.add(dto);
        }
        return result;
    }

    private Double convertToDouble(Object value) {
        if (value == null) {
            return null;
        }
        if (value instanceof Number) {
            return ((Number) value).doubleValue();
        }
        try {
            return Double.parseDouble(value.toString());
        } catch (NumberFormatException e) {
            return null; // or handle the error as needed
        }
    }

    private Integer convertToInteger(Object value) {
        if (value == null) {
            return null;
        }
        if (value instanceof Number) {
            return ((Number) value).intValue();
        }
        try {
            return Integer.parseInt(value.toString());
        } catch (NumberFormatException e) {
            return null; // or handle the error as needed
        }
    }

    private List<Map<String, Object>> queryThis(String startDate, String endDate, String userId) {
        String sql = "SELECT "
                + "p.date, "
                + "COALESCE(p.total_sum, 0) AS petrol_total_sum, "
                + "COALESCE(p.total_testing, 0) AS petrol_total_testing, "
                + "COALESCE(p.petrol_ltr, 0) AS petrol_ltr, "
                + "COALESCE(p.rate, 0) AS petrol_rate, "
                + "COALESCE(p.total_total_sell, 0) AS petrol_total_total_sell, "
                + "COALESCE(d.total_sum, 0) AS diesel_total_sum, "
                + "COALESCE(d.total_testing, 0) AS diesel_total_testing, "
                + "COALESCE(d.diesel_ltr, 0) AS diesel_ltr, "
                + "COALESCE(d.rate, 0) AS diesel_rate, "
                + "COALESCE(d.total_total_sell, 0) AS diesel_total_total_sell, "
                + "COALESCE(pg.petrolgatt_Total, 0) AS petrolgatt_Total, "
                + "COALESCE(dg.dieselgatt_Total, 0) AS dieselgatt_Total, "

                // xppetrol
                + "COALESCE(xp.xppetrol_ltr, 0) AS xppetrol_ltr, "
                + "COALESCE(xp.total_sum, 0) AS xppetrol_total_sum, "
                + "COALESCE(xp.rate, 0) AS xppetrol_rate, "
                + "COALESCE(xp.total_testing, 0) AS xppetrol_total_testing, "
                + "COALESCE(xp.total_sell, 0) AS xppetrol_total_sell, "
                + "COALESCE(xpg.xppetrolgatt_Total, 0) AS xppetrolgatt_Total, "
                // powerdiesel
                + "COALESCE(pd.powerdiesel_ltr, 0) AS powerdiesel_ltr, "
                + "COALESCE(pd.total_sum, 0) AS powerdiesel_total_sum, "
                + "COALESCE(pd.rate, 0) AS powerdiesel_rate, "
                + "COALESCE(pd.total_testing, 0) AS powerdiesel_total_testing, "
                + "COALESCE(pd.total_sell, 0) AS powerdiesel_total_sell, "
                + "COALESCE(pdg.power_dieselgatt_Total, 0) AS power_dieselgatt_Total, "
                
                + "COALESCE(o.total_price, 0) AS oil_total_price, "
                + "COALESCE(k.Kharch_Total, 0) AS Kharch_Total, "
                + "COALESCE(pp.petrol_quantity, 0) AS Petrol_Quantity, "
                + "COALESCE(pp.petrol_total, 0) AS Petrol_Total, "
                + "COALESCE(pp.petrol_vat, 0) AS Petrol_Vat, "
                + "COALESCE(pp.petrol_cess, 0) AS Petrol_Cess, "
                + "COALESCE(pp.petrol_jtcpercentage, 0) AS Petrol_Jtcpercentage, "
                + "COALESCE(pp.petrol_total_purchase, 0) AS Petrol_Total_Purchase, "
                + "COALESCE(dp.diesel_quantity, 0) AS Diesel_Quantity, "
                + "COALESCE(dp.diesel_total, 0) AS Diesel_Total, "
                + "COALESCE(dp.diesel_vat, 0) AS Diesel_Vat, "
                + "COALESCE(dp.diesel_cess, 0) AS Diesel_Cess, "
                + "COALESCE(dp.diesel_jtcpercentage, 0) AS Diesel_Jtcpercentage, "
                + "COALESCE(dp.diesel_total_purchase, 0) AS Diesel_Total_Purchase, "
                + "COALESCE(t.Amount_Total, 0) AS Amount_Total, "
                + "COALESCE(j.Jama_Total, 0) AS Jama_Total, "
                + "COALESCE(j.Baki_Total, 0) AS Baki_Total, "
                //Xp
                + "COALESCE(xpp.xppetrol_quantity, 0) AS xppetrol_quantity, "
                + "COALESCE(xpp.xppetrol_total, 0) AS xppetrol_total, "
                + "COALESCE(xpp.xppetrol_cess, 0) AS xppetrol_cess, "
                + "COALESCE(xpp.xppetrol_jtcpercentage, 0) AS xppetrol_jtcpercentage, "
                + "COALESCE(xpp.xppetrol_total_purchase, 0) AS xppetrol_total_purchase, "
                + "COALESCE(xpp.xppetrol_vat, 0) AS xppetrol_vat, "
                //Power
                + "COALESCE(pdp.powerdiesel_quantity, 0) AS powerdiesel_quantity, "
                + "COALESCE(pdp.powerdiesel_total, 0) AS powerdiesel_total, "
                + "COALESCE(pdp.powerdiesel_cess, 0) AS powerdiesel_cess, "
                + "COALESCE(pdp.powerdiesel_jtcpercentage, 0) AS powerdiesel_jtcpercentage, "
                + "COALESCE(pdp.powerdiesel_total_purchase, 0) AS powerdiesel_total_purchase, "
                + "COALESCE(pdp.powerdiesel_vat, 0) AS powerdiesel_vat "
                + "FROM "
                + "(SELECT "
                + "date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(total) AS total_sum, "
                + "SUM(testing) AS total_testing, "
                + "SUM(petrol_ltr) AS petrol_ltr, "
                + "rate, "
                + "SUM(total_sell) AS total_total_sell "
                + "FROM "
                + "managment.petrolsell "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) p "
                + "JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(total) AS total_sum, "
                + "SUM(testing) AS total_testing, "
                + "SUM(diesel_ltr) AS diesel_ltr, "
                + "rate, "
                + "SUM(total_sell) AS total_total_sell "
                + "FROM "
                + "managment.dieselsell "
                + "WHERE "
                + "date BETWEEN  '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) d "
                + "ON "
                + "p.date = d.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(price) AS total_price "
                + "FROM "
                + "managment.OilSell "
                + "WHERE "
                + "date BETWEEN  '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) o "
                + "ON "
                + "p.date = o.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(price) AS Kharch_Total "
                + "FROM "
                + "managment.kharch "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) k "
                + "ON "
                + "p.date = k.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, type, "
                + "quantity AS petrol_quantity, "
                + "total AS petrol_total, "
                + "vat AS petrol_vat, "
                + "cess AS petrol_cess, "
                + "jtcpercentage AS petrol_jtcpercentage, "
                + "total_purchase AS petrol_total_purchase "
                + "FROM "
                + "managment.purchase "
                + "WHERE "
                + "type = 'petrol' AND user_id = '" + userId + "') pp " // Filter by userId
                + "ON "
                + "p.date = pp.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(amount) AS Amount_Total "
                + "FROM "
                + "managment.transaction "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) t "
                + "ON "
                + "p.date = t.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, type, "
                + "quantity AS diesel_quantity, "
                + "total AS diesel_total, "
                + "vat AS diesel_vat, "
                + "cess AS diesel_cess, "
                + "jtcpercentage AS diesel_jtcpercentage, "
                + "total_purchase AS diesel_total_purchase "
                + "FROM "
                + "managment.purchase "
                + "WHERE "
                + "type = 'diesel'  AND user_id = '" + userId + "') dp " // Filter by userId
                + "ON "
                + "d.date = dp.date "
                + "LEFT JOIN ("
                + "SELECT date, "
                + "extra_cess AS xppetrol_cess, "
                + "extra_jtcpercentage AS xppetrol_jtcpercentage, "
                + "extra_quantity AS xppetrol_quantity, "
                + "extra_total AS xppetrol_total, "
                + "extra_total_purchase AS xppetrol_total_purchase, "
                + "extra_vat AS xppetrol_vat "
                + "FROM managment.extrapurchases "
                + "WHERE extra_type = 'XP Petrol' "
                + "AND user_id = '" + userId + "' "
                + "AND date BETWEEN '" + startDate + "' AND '" + endDate + "'"
                + ") xpp ON p.date = xpp.date "
                + "LEFT JOIN ("
                + "SELECT date, "
                + "extra_cess AS powerdiesel_cess, "
                + "extra_jtcpercentage AS powerdiesel_jtcpercentage, "
                + "extra_quantity AS powerdiesel_quantity, "
                + "extra_total AS powerdiesel_total, "
                + "extra_total_purchase AS powerdiesel_total_purchase, "
                + "extra_vat AS powerdiesel_vat "
                + "FROM managment.extrapurchases "
                + "WHERE extra_type = 'Power Diesel' "
                + "AND user_id = '" + userId + "' "
                + "AND date BETWEEN '" + startDate + "' AND '" + endDate + "'"
                + ") pdp ON p.date = pdp.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(jama) AS Jama_Total, "
                + "SUM(baki) AS Baki_Total "
                + "FROM "
                + "managment.jamabakireport "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) j "
                + "ON "
                + " p.date = j.date "
                + "LEFT JOIN (SELECT date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(xppetrol_ltr) AS xppetrol_ltr, "
                + "SUM(testing) AS total_testing, "
                + "SUM(total) AS total_sum, "
                + "SUM(total_sell) AS total_sell, "
                + "rate "
                + "FROM managment.xppetrol "
                + "WHERE date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date) xp ON p.date = xp.date "
                // ✅ LEFT JOIN powerdiesel
                + "LEFT JOIN (SELECT date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(powerdiesel_ltr) AS powerdiesel_ltr, "
                + "SUM(testing) AS total_testing, "
                + "SUM(total) AS total_sum, "
                + "SUM(total_sell) AS total_sell, "
                + "rate "
                + "FROM managment.powerdiesel "
                + "WHERE date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date) pd ON p.date = pd.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(petrolgatt) AS petrolgatt_Total "
                + "FROM "
                + "managment.petrolgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) pg "
                + "ON "
                + "p.date = pg.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(dieselgatt) AS dieselgatt_Total "
                + "FROM "
                + "managment.dieselgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) dg "
                + "ON "
                + "p.date = dg.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(xppetrolgatt) AS xppetrolgatt_Total "
                + "FROM "
                + "managment.xppetrolgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) xpg "
                + "ON "
                + "p.date = xpg.date "

                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(power_dieselgatt) AS power_dieselgatt_Total "
                + "FROM "
                + "managment.powerdieselgatt "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) pdg "
                + "ON "
                + "p.date = pdg.date "

                + "LEFT JOIN (SELECT "
                + "date, "
                + "SUM(price) AS Kharch_Total "   // ✅ Removed `expenses` from SELECT
                + "FROM "
                + "managment.kharch "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date) ep "           // ✅ Removed `expenses` from GROUP BY
                + "ON p.date = ep.date "



                + "ORDER BY "
                + "p.date;";

        return jdbcTemplate.queryForList(sql);
    }
