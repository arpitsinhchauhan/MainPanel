div class="card">
                   <div class="card-header card-header-danger">
                      <h4 class="card-title">Expenses Details :-</h4>
                   </div>
                   <div class="card-body">
                      <div class="row">
                         <div class="col-md-4">
                            <label for="start-date">Start Date:</label>
                            <input type="date" id="start-date" [(ngModel)]="startDateJb" class="form-control" required />
                         </div>
                         <div class="col-md-4">
                            <label for="end-date">End Date:</label>
                            <input type="date" id="end-date" [(ngModel)]="endDateJb" class="form-control" required />
                         </div>
                      </div>
                      <div class="row" *ngIf="startDateJb && endDateJb">
                        <div class="col-md-8">
                            <mat-form-field appearance="fill" style="width: 100%;">
                              <mat-label>Select Expense</mat-label>
                              <mat-select placeholder="Select Expense"
                                          [(ngModel)]="selectedExpense"
                                          (selectionChange)="expensesExcel($event)">
                                <mat-option *ngFor="let expense of expensesList" [value]="expense">
                                  {{ expense }}
                                </mat-option>
                              </mat-select>
                            </mat-form-field>
                          </div>
                          
                      </div>
                   </div>
                </div>
				
				expensesExcel(event: any): void {
    const dialogRef = this.dialog.open(ExpensesExcelComponent, {
      width: "50%",
      height: "50%",
      data: {
        expense: this.selectedExpense,
        startDate: this.startDateJb,
        endDate: this.endDateJb,
      },
    });
    dialogRef.afterClosed().subscribe((result) => {
      if (result) {
        location.reload();
      }
    });
  }
  
  
  export class ExpensesExcelComponent implements OnInit {

  isReload: boolean;
  expenseList: any[] = [];
  
  constructor(@Inject(MAT_DIALOG_DATA) public data: any,
    private user: UserServiceService, private dialogRef: MatDialogRef<ExpensesExcelComponent>) {
  }

  ngOnInit(): void {
    this.fetchExpence();
  }

  fetchExpence(): void {
    this.user.getExpenses(this.data.expense, this.data.startDate, this.data.endDate).subscribe((data: any[]) => {
    this.expenseList = data.map(item => ({
      date: item.date,
      expenses: item.expenses,
      price: item.price
    }));
    });

  }


  printTable() {
    const printContent = document.getElementById('ExpenseTable')?.outerHTML;
    const originalContent = document.body.innerHTML;

    document.body.innerHTML = printContent ?? '';
    window.print();
    document.body.innerHTML = originalContent;
    window.location.reload(); // To reload the page and reset the original content
  }

  exportToExcel() {
    // Convert HTML table to workbook
    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(document.getElementById('ExpenseTable')!);
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');

    // Save the workbook
    XLSX.writeFile(wb, 'Expense_Data.xlsx');
  }

  cancel() {
    this.dialogRef.close({ 'isReload': this.isReload });
  }

}



<div class="button-group">
    <button mat-raised-button  (click)="exportToExcel()">
      <mat-icon>file_download</mat-icon>
      Export to Excel
    </button>
    <button mat-raised-button  (click)="printTable()">
      <mat-icon>picture_as_pdf</mat-icon>
      PDF
    </button>
    <button mat-raised-button  (click)="cancel()">
      <mat-icon>cancel</mat-icon>
      Cancel
    </button>
  </div>

<p>Expense Name : -{{data.expense}}</p>
<table id="ExpenseTable">
    <thead>
      <tr>
        <th scope="col">Date</th>
        <th scope="col">Expense</th>
        <th scope="col">Total</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let item of expenseList">
        <td>{{ item.date }}</td>
        <td>{{ item.expenses }}</td>
        <td>{{ item.price }}</td>
      </tr>
    </tbody>
  </table>
  
  
  
  .button-group {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-bottom: 15px;
  }
  
  .button-group button {
    width: 140px;
  }
  

table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
    font-size: 16px;
    text-align: left;
}

th, td {
    padding: 12px 15px;
    border: 1px solid #ddd;
}

th {
    background-color: #f4f4f4;
    font-weight: bold;
}

tr:nth-child(even) {
    background-color: #f9f9f9;
}

tr:hover {
    background-color: #f1f1f1;
}

strong {
    font-weight: bold;
}

td[colspan="2"] {
    text-align: center;
}

table tr:last-child td {
    border-bottom: 2px solid #ddd;
}

.table-header {
    background-color: #4CAF50;
    color: white;
}

.total-row {
    background-color: #f2f2f2;
    font-weight: bold;
}

.total-amount-row {
    background-color: #e2e2e2;
    font-weight: bold;
}


getExpenses(
    expense: string,
    startDate: string,
    endDate: string
  ): Observable<any[]> {
    const userId = localStorage.getItem("userId");
    let params = new HttpParams()
      .set("expense", expense)
      .set("startDate", startDate)
      .set("endDate", endDate)
      .set("userId", userId);

    return this.http.get<any[]>(API_EXPENSE_EXCEL, { params });
  }
  
  export const API_EXPENSE_EXCEL: string = `${prefix}/portal/api/expensesExcel`;
  
  
   @GetMapping("/expensesExcel")
    public List<kharch> getExpenses(
            @RequestParam("startDate") String startDate,
            @RequestParam("endDate") String endDate,
            @RequestParam("expense") String expense,
            @RequestParam("userId") String userId) {
        return kharchrepository.findByDateBetweenAndExpensesLikeAndUserId(startDate, endDate, expense, userId);
    }
	
	  @Query("SELECT j FROM kharch j WHERE j.date BETWEEN :startDate AND :endDate AND j.expenses LIKE :expenses AND j.userId = :userId")
    List<kharch> findByDateBetweenAndExpensesLikeAndUserId(
            @Param("startDate") String startDate,
            @Param("endDate") String endDate,
            @Param("expenses") String expense,
            @Param("userId") String userId
    );
	
	
	
	
	////////////////////////////////////////////////////
	getTotalPetrolSell(): number {
    return this.PetrolSelltList.reduce((total, product) => 
      total + (parseFloat(product.total_sell) || 0), 0
    );
  }
  
  <td style="background-color: #d0b6b6;"><strong>{{ getTotalDiesel() | number:'1.2-2' }}</strong></td>
   getTotalDiesel(): number {
      return this.DieselSelltList.reduce((sum, product) => 
        sum + (parseFloat(product.total_sell) || 0), 0
      );
  }
  
  
    getTotalOilSell(): number {
      return this.OilsellList.reduce((total, product) => 
        total + (parseFloat(product.price) || 0), 0
      );
  }
  
  getKharch(): number {
      return this.kharchlist.reduce((total, product) => 
        total + (parseFloat(product.price) || 0), 0
      );
  }
  
   getTransaction(): number {
      return this.transaction.reduce((total, product) => 
        total + (parseFloat(product.amount) || 0), 0
      );
  }
  
  //////////////////////////////////////////////////////////////////////////////
   <div class="card">
               <div>
                  <canvasjs-chart [options]="chartOptions2" [styles]="{width: '100%', height:'360px'}"></canvasjs-chart>    
              </div>                        
            </div>
			
			chartOptions2: any = {
    animationEnabled: true,
    title: {
      text: "Fuel & Baki Distribution"
    },
    data: [{
      type: "pie",
      startAngle: 240,
      // yValueFormatString: "##0.00\"%\"",
      indexLabel: "{label} - {y}%",
      dataPoints: []
    }]
  };
  
  updatePieChart() {
    this.chartOptions2 = {
      ...this.chartOptions2,
      data: [{
        type: "pie",
        startAngle: 240,
        // yValueFormatString: "##0.00\"%\"",
        indexLabel: "{label} - {y}",
        dataPoints: [
          { y: this.petrollabel, label: "Petrol ($)" },
          { y: this.diesellabel, label: "Diesel ($)" },
          { y: this.jamabakilabel, label: "Baki ($)" }
        ]
      }]
    };
  }
  CanvasJSAngularChartsModule
  import { CanvasJSAngularChartsModule } from '@canvasjs/angular-charts';
  
  
  
getPurchaselist(){
  const formattedDate = this.use.getFormattedDate(this.reportDate);
  this.use.getPurchaseiList(formattedDate, this.userId).subscribe(
    (data) => {
      if (data && data.length > 0) {
        for (const item of data) {
          const [quantity, type] = item;
          if (type === 'Petrol') {
            this.petolQuantity = quantity;
          } else if (type === 'Diesel') {
            this.dieselQuantity = quantity;
          }
        }
      } else {
        this.petolQuantity = 0;
        this.dieselQuantity = 0;
      }      
    },
    (error) => {
      this.notificationService.failure("Failed to fetch Purchase data.");
    }
  );
}

    @Query("SELECT t1.Quantity,t1.type FROM Purchase t1 WHERE t1.date = :date AND t1.userId = :userId")
    List<Purchase> getPurchase(@Param("date") String date, @Param("userId") String userId);
/////////////////////////

  deleteUser(id) {
     this.use.deleteUser(id).subscribe((result) => {
      this.userList = result;
      this.notificationService.success('User deleted successfully');
      this.getdata();
    });
  }
  
  deleteUser(id: string): Observable<any> {
    return this.http.delete(`${API_USER_DELETE}/${id}`);
  }
  
  export const API_USER_DELETE: string = `${prefix}/portal/api/deleteUser`;
  
  @DeleteMapping("/deleteUser/{id}")
    public ResponseEntity<ApiResponse> deleteUser(@PathVariable Long id) {
        try {
            userRepository.deleteById(id);
            ApiResponse response = new ApiResponse("User deleted successfully");
            return ResponseEntity.ok(response);
        } catch (EmptyResultDataAccessException ex) {
            return ResponseEntity.notFound().build(); 
        }
    }
	
void deleteById(Long id);


//Sidebar
ngOnInit() {
    const userId = localStorage.getItem('userId');
    this.role = localStorage.getItem('role') || '';
  
    this.userService.getUserPump(userId).subscribe(response => {
      const data = response?.data || {};
  
      const xpPetrolEnabled = data?.xp_petrol_nozzle !== '0';
      const powerDieselEnabled = data?.powe_diesel_nozzle !== '0';
  
      // ✅ Step 1: Apply nozzle conditions
      let filteredRoutes = ROUTES.filter(item => {
        if (item.path === '/XPpetrol' && !xpPetrolEnabled) return false;
        if (item.path === '/powerDiesel' && !powerDieselEnabled) return false;
        if ((item.path === '/extraDipp' || item.path === '/extraPurchasedetails') &&
            !xpPetrolEnabled && !powerDieselEnabled) return false;
        return true;
      });
  
      // ✅ Step 2: Apply role-based filter *on top of* nozzle filter
      if (this.role === 'admin') {
        this.menuItems = filteredRoutes.filter(item => item.path === '/User');
      } else if (this.role === 'user') {
        this.menuItems = filteredRoutes.filter(item => item.path !== '/User');
      } else {
        this.menuItems = filteredRoutes;
      }
  
      // ✅ Step 3: Initialize scrollbar
      if (window.matchMedia(`(min-width: 960px)`).matches && !this.isMac()) {
        const elemSidebar = <HTMLElement>document.querySelector('.sidebar .sidebar-wrapper');
        this.ps = new PerfectScrollbar(elemSidebar);
      }
    });
  }
  
  
  //server
  @SpringBootApplication
@EnableAutoConfiguration
@EnableScheduling
public class PumpManagmentApplication extends SpringBootServletInitializer {

    public static void main(String[] args) {
        SpringApplication.run(PumpManagmentApplication.class, args);
    }

}
package pumpManagment.sedular;

import java.text.ParseException;
import java.time.LocalDateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

/**
 *
 * @author Arpitsinh Chauhan
 */
@Service
public class DailyTotalCleanup {

    // Runs every 1 minute
     @Autowired
    private JdbcTemplate jdbcTemplate;

    // Scheduled to run every 1 minute
    @Scheduled(cron = "0 * * * * *", zone = "Asia/Kolkata")
    public void DailyTotalCleanup() {
        String sql = "DELETE FROM dailytotal " +
                 "WHERE (date, user_id) NOT IN ( " +
                 "SELECT DISTINCT date, user_id FROM petrolsell " +
                 "UNION " +
                 "SELECT DISTINCT date, user_id FROM xppetrol " +
                 "UNION " +
                 "SELECT DISTINCT date, user_id FROM dieselsell " +
                 "UNION " +
                 "SELECT DISTINCT date, user_id FROM powerdiesel " +
                 ")";
         int rowsDeleted = jdbcTemplate.update(sql);
    }
}


 <input type="date" [(ngModel)]="startDatePdf">
             <input type="date" [(ngModel)]="endDatePdf">
             <button (click)="pdf()">PDF</button>
			 
pdf() {
    const pdfLogData = {
      userid: this.userId,
      downloadTime: new Date().toISOString(),
      fileType: 'PDF',
      fileName: `Profit&Loss`+this.startDatePdf +`to`+this.endDatePdf+`.pdf`
    };
    this.use.downloadPdf(this.userId, this.startDatePdf, this.endDatePdf).subscribe(blob => {
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = pdfLogData.fileName;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      this.loaderService.display(false);
    },
    (error) => {
      console.error('Error downloading the file', error);
      this.loaderService.display(false);
    }
  );
}

downloadPdf(userId: any, startDate: any, endDate: any): Observable<Blob> {
    return this.http.get(`${API_PROFIT_LOSS_PDF}/${userId}/${startDate}/${endDate}`, {
      responseType: 'blob'
    });
    
  }
  
  
  export const API_PROFIT_LOSS_PDF = `${prefix}/portal/api/generatePdf`;
  
   @GetMapping(path = "/generatePdf/{userId}/{startDate}/{endDate}")
public ResponseEntity<byte[]> generatePdf(
        @PathVariable Long userId,
        @PathVariable String startDate,
        @PathVariable String endDate) throws ParseException {
        ResponseEntity<byte[]> response = profitLossService.generatePdf(userId, startDate, endDate);
        byte[] pdfBytes = response.getBody();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_PDF);
        headers.add("Content-Disposition", "attachment; filename=LicenseList.pdf");

        return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);

    }
	
public interface ProfitLossService {
    
   ResponseEntity<byte[]> generatePdf(Long userId, String startDate, String endDate) throws ParseException;

    
}



@Service
public class MyReportGenerator implements ProfitLossService {

    @Override
    public ResponseEntity<byte[]> generatePdf(Long userId, String startDate, String endDate) throws ParseException {
        try {
            final Context ctx = new Context();

            ctx.setVariable("customerInfo", "");

            ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();
            resolver.setPrefix("templates/");
            resolver.setSuffix(".html");
            resolver.setTemplateMode(TemplateMode.HTML);
            resolver.setCharacterEncoding("UTF-8");

            // 3. Process template
            TemplateEngine templateEngine = new TemplateEngine();
            templateEngine.setTemplateResolver(resolver);
            String html = templateEngine.process("ItReturn", ctx);

            // 4. Generate PDF
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            ITextRenderer renderer = new ITextRenderer();
            renderer.setDocumentFromString(html);
            renderer.layout();

            renderer.createPDF(outputStream);

            byte[] pdfBytes = outputStream.toByteArray();

            String desktopPath = System.getProperty("user.home") + "/Desktop/Personal/";
            String fileName = "Profit&Loss_.pdf";
            Path outputPath = Paths.get(desktopPath + fileName);

            Files.createDirectories(outputPath.getParent());

            try {
                // Write PDF file
                Files.write(outputPath, pdfBytes);
            } catch (IOException ex) {
                Logger.getLogger(Utility.class.getName()).log(Level.SEVERE, null, ex);
            }
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.add("Content-Disposition", "attachment; filename=Profit&Loss.pdf");
            System.out.println("PDF saved to: " + outputPath.toAbsolutePath());
            return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
        } catch (IOException ex) {
            Logger.getLogger(MyReportGenerator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(MyReportGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
}

 <dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>RELEASE</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.28</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <dependency>
            <groupId>org.xhtmlrenderer</groupId>
            <artifactId>flying-saucer-pdf</artifactId>
            <version>9.1.22</version>
            <type>jar</type>
        </dependency>
        <dependency>
            <groupId>ognl</groupId>
            <artifactId>ognl</artifactId>
            <version>3.2.21</version> <!-- or latest available -->
        </dependency>
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf</artifactId>
            <version>3.1.2.RELEASE</version> <!-- adjust as needed -->
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.15.3</version> <!-- Or the latest stable version -->
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.3</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.15.3</version>
        </dependency>
░
///////////////////////////////////
@PostMapping("/addPurchase")
    public ResponseEntity<List<Purchase>> updatePurchase(@RequestBody List<Purchase> expenses) {
        List<Purchase> updatedExpenses = new ArrayList<>();

//        for (Purchase expense : expenses) {
//            Optional<Purchase> existingEntry = purchaseRepository.findByDateAndType(expense.getDate(), expense.getType());
        for (Purchase expense : expenses) {
            Optional<Purchase> existingEntry = purchaseRepository.findByDateAndTypeAndUserId(
                    expense.getDate(), expense.getType(), expense.getUserId()
            );
            if (existingEntry.isPresent()) {
                Purchase existingExpense = existingEntry.get();

                // Perform arithmetic addition instead of string concatenation
                existingExpense.setQuantity(String.valueOf(Long.parseLong(existingExpense.getQuantity()) + Long.parseLong(expense.getQuantity())));
                existingExpense.setTotal(String.valueOf(Long.parseLong(existingExpense.getTotal()) + Long.parseLong(expense.getTotal())));
                existingExpense.setVat(String.valueOf(Long.parseLong(existingExpense.getVat()) + Long.parseLong(expense.getVat())));
                existingExpense.setCess(String.valueOf(Long.parseLong(existingExpense.getCess()) + Long.parseLong(expense.getCess())));
                existingExpense.setJtcpercentage(String.valueOf(Long.parseLong(existingExpense.getJtcpercentage()) + Long.parseLong(expense.getJtcpercentage())));
                existingExpense.setTotal_purchase(existingExpense.getTotal_purchase() + expense.getTotal_purchase());

                // Save the updated expense
                Purchase savedExpense = purchaseRepository.save(existingExpense);
                updatedExpenses.add(savedExpense);

            } else {
                // If it doesn't exist, it is saved as a new entry
                Purchase savedExpense = purchaseRepository.save(expense);
                updatedExpenses.add(savedExpense);
            }
        }
        return ResponseEntity.ok(updatedExpenses);
    }
	
	
	Optional<Purchase> findByDateAndTypeAndUserId(String date, String type, String userId);
	
	
	/////////////////////////////////////
	<div>
            <div class="title">Back Page</div>
            <div class="row">
               <div class="col-md-6">
                  <div class="table-wrapper">
                     <table *ngIf="firstTableData && firstTableData.length > 0">
                        <thead>
                           <tr>
                              <th class="column">Name</th>
                              <th class="column">Jama</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr *ngFor="let item of firstTableData">
                              <td>{{ item[0].trim() }}</td>
                              <td>{{ item[1] | number: '1.0-2' }}</td>
                           </tr>
                           <tr class="totalR">
                              <td><strong>Total</strong></td>
                              <td><strong>{{ jamaTotal | number: '1.0-2' }}</strong></td>
                            </tr>
                        </tbody>
                     </table>
                     <p *ngIf="!firstTableData || firstTableData.length === 0">No data available.</p>
                  </div>
               </div>
               <div class="col-md-6">
                  <div class="table-wrapper">
                     <table *ngIf="secondTableData && secondTableData.length > 0">
                        <thead>
                           <tr>
                              <th class="column">Name</th>
                              <th class="column">Baki</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr *ngFor="let item of secondTableData">
                              <td>{{ item[0].trim() }}</td>
                              <td>{{ item[1] | number: '1.0-2' }}</td>
                           </tr>
                           <tr class="totalR">
                              <td><strong>Total</strong></td>
                              <td><strong>{{ bakiTotal | number: '1.0-2' }}</strong></td>
                            </tr>
                        </tbody>
                     </table>
                     <p *ngIf="!secondTableData || secondTableData.length === 0">No data available.</p>
                  </div>
               </div>
            </div>
            <div class="row">
               <div class="col-md-6">
                  <div class="table-wrapper">
                     <table *ngIf="kharchSellSummary && kharchSellSummary.length > 0">
                        <thead>
                           <tr>
                              <th class="column">Name</th>
                              <th class="column">Kharch</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr *ngFor="let item of kharchSellSummary">
                              <td>{{ item[0].trim() }}</td>
                              <td>{{ item[1] }}</td>
                           </tr>
                           <tr class="totalR" >
                              <td><strong>Total</strong></td>
                              <td><strong>{{ kharchTotal | number: '1.0-2' }}</strong></td>
                            </tr>
                        </tbody>
                     </table>
                     <p *ngIf="!kharchSellSummary || kharchSellSummary.length === 0">No data available.</p>
                  </div>
               </div>
               <div class="col-md-6">
                  <div class="table-wrapper">
                     <table *ngIf="transactionSellSummary && transactionSellSummary.length > 0">
                        <thead>
                           <tr>
                              <th class="column">Name</th>
                              <th class="column">Transaction Amount</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr *ngFor="let item of transactionSellSummary">
                              <td>{{ item[0].trim() }}</td>
                              <td>{{ item[1] }}</td>
                           </tr>
                           <tr class="totalR">
                              <td><strong>Total</strong></td>
                              <td><strong>{{ ATMTotal | number: '1.0-2' }}</strong></td>
                            </tr>
                        </tbody>
                     </table>
                     <p *ngIf="!transactionSellSummary || transactionSellSummary.length === 0">No data available.</p>
                  </div>
               </div>
            </div>
         </div>
		 
		 
		 
		 
		 //////////////////////////
		 
		 <!-- data-display.component.html -->
<div *ngIf="productList.length > 0">
  <button (click)="exportToExcel()">Export to Excel</button>
  <table>
     <tr>
        <th>Date</th>
        <th class="petrol">Petrol Total Close Meter</th>
        <th>Petrol Total Open Meter</th>
        <th>Petrol Total Sum</th>
        <th>Petrol Total Testing</th>
        <th>Petrol Ltr</th>
        <th>Petrol Rate</th>
        <th>Petrol Total Sell</th>
        <th>Diesel Total Close Meter</th>
        <th>Diesel Total Open Meter</th>
        <th>Diesel Total Sum</th>
        <th>Diesel Total Testing</th>
        <th>Diesel Ltr</th>
        <th>Diesel Rate</th>
        <th>Diesel Total Sell</th>
        <th>Oil Total Price</th>
        <th>Kharch Total</th>
        <th>P Type</th>
        <th>Petrol Quantity</th>
        <th>Petrol Total</th>
        <th>Petrol Vat</th>
        <th>Petrol Cess</th>
        <th>Petrol Jtcpercentage</th>
        <th>Petrol Total Purchase</th>
        <th>D Type</th>
        <th>Diesel Quantity</th>
        <th>Diesel Total</th>
        <th>Diesel Vat</th>
        <th>Diesel Cess</th>
        <th>Diesel Jtcpercentage</th>
        <th>Diesel Total Purchase</th>
        <th>ATM Total</th>
        <th>Jama Total</th>
        <th>Baki Total</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Close Meter</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Open Meter</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Ltr</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total Sum</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Rate</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Testing</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total Sell</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Close Meter</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Open Meter</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Ltr</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total Sum</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Rate</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Testing</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total Sell</th>
        <!-- ✅ New XP Petrol Purchase -->
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Quantity</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol VAT</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol CESS</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol JTC%</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">XP Petrol Total Purchase</th>
        <!-- ✅ New Power Diesel Purchase -->
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Quantity</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel VAT</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel CESS</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel JTC%</th>
        <th *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">Power Diesel Total Purchase</th>
     </tr>
     <tr *ngFor="let item of productList">
        <td>{{ item.date }}</td>
        <td>{{ item.petrolTotalCloseMeter }}</td>
        <td>{{ item.petrolTotalOpenMeter }}</td>
        <td>{{ item.petrolTotalSum }}</td>
        <td>{{ item.petrolTotalTesting }}</td>
        <td>{{ item.petrolLtr }}</td>
        <td>{{ item.petrolRate }}</td>
        <td>{{ item.petrolTotalTotalSell }}</td>
        <td>{{ item.dieselTotalCloseMeter }}</td>
        <td>{{ item.dieselTotalOpenMeter }}</td>
        <td>{{ item.dieselTotalSum }}</td>
        <td>{{ item.dieselTotalTesting }}</td>
        <td>{{ item.dieselLtr }}</td>
        <td>{{ item.dieselRate }}</td>
        <td>{{ item.dieselTotalTotalSell }}</td>
        <td>{{ item.oilTotalPrice }}</td>
        <td>{{ item.kharchTotal }}</td>
        <td>{{ item.pType }}</td>
        <td>{{ item.petrolQuantity }}</td>
        <td>{{ item.petrolTotal }}</td>
        <td>{{ item.petrolVat }}</td>
        <td>{{ item.petrolCess }}</td>
        <td>{{ item.petrolJtcpercentage }}</td>
        <td>{{ item.petrolTotalPurchase }}</td>
        <td>{{ item.dType }}</td>
        <td>{{ item.dieselQuantity }}</td>
        <td>{{ item.dieselTotal }}</td>
        <td>{{ item.dieselVat }}</td>
        <td>{{ item.dieselCess }}</td>
        <td>{{ item.dieselJtcpercentage }}</td>
        <td>{{ item.dieselTotalPurchase }}</td>
        <td>{{ item.amountTotal }}</td>
        <td>{{ item.jamaTotal }}</td>
        <td>{{ item.bakiTotal }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolCloseMeter }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolOpenMeter }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolLtr }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotalSum }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolRate }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotalTesting }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotalSell }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselCloseMeter }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselOpenMeter }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselLtr }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotalSum }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselRate }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotalTesting }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotalSell }}</td>
        <!-- ✅ New XP Petrol Purchase -->
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolQuantity }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotal }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolVat }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolCess }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolJtcpercentage }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.xppetrolTotalPurchase }}</td>
        <!-- ✅ New Power Diesel Purchase -->
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselQuantity }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotal }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselVat }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselCess }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselJtcpercentage }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ item.powerdieselTotalPurchase }}</td>
     </tr>
     <tr>
        <td colspan="3"></td>
        <td>{{ totalPetrolSum }}</td>
        <td></td>
        <td>{{ totalPetrolltr }}</td>
        <td></td>
        <td>{{ totalPetroltotalsum }}</td>
        <td></td>
        <td></td>
        <td>{{ totalDieselsum }}</td>
        <td></td>
        <td>{{ totalDieselltr }}</td>
        <td></td>
        <td>{{ totalDieseltotalSum }}</td>
        <td>{{ totalOilTotalPrice }}</td>
        <td>{{ totalKharchTotal }}</td>
        <td></td>
        <td>{{ totalPetrolQuantity }}</td>
        <td>{{ totalPetrolTotal }}</td>
        <td>{{ totalPetrolVat }}</td>
        <td>{{ totalPetrolCess }}</td>
        <td>{{ totalPetrolJtcpercentage }}</td>
        <td>{{ totalPetrolTotalPurchase }}</td>
        <td></td>
        <td>{{ totalDieselQuantity }}</td>
        <td>{{ totalDieselTotal }}</td>
        <td>{{ totalDieselVat }}</td>
        <td>{{ totalDieselCess }}</td>
        <td>{{ totalDieselJtcpercentage }}</td>
        <td>{{ totalDieselTotalPurchase }}</td>
        <td>{{ totalAmountTotal }}</td>
        <td>{{ totalJamaTotal }}</td>
        <td>{{ totalBakiTotal }}</td>
        <!-- XP Petrol Totals -->
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolLtr }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotalSum }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotalSell }}</td>
        <!-- Power Diesel Totals -->
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselLtr }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotalSum }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0"></td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotalSell }}</td>
        <!-- XP Petrol Purchase Totals -->
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolQuantity }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotal }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolVat }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolCess }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolJtcpercentage }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalXpPetrolTotalPurchase }}</td>
        <!-- Power Diesel Purchase Totals -->
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselQuantity }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotal }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselVat }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselCess }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselJtcpercentage }}</td>
        <td *ngIf="xp_petrol_nozzle > 0 || powe_diesel_nozzle > 0">{{ totalPowerDieselTotalPurchase }}</td>
     </tr>
  </table>
</div>
<div *ngIf="productList.length === 0">
  No data available.
</div>


///////////////

export class PumpDetailComponent implements OnInit {
  // productList: any = [];
  startDate: string;
  totalPetrolSum: number = 0;
  endDate: string;
  combinedSummary: any[] = [];
  productList: AggregatedDataDTO[] = [];
  totalPetrolltr: number = 0;
  totalPetroltotalsum: number = 0;
  totalDieselsum: number = 0;
  totalDieselltr: number = 0;
  totalDieseltotalSum: number = 0;
  totalOilTotalPrice: number = 0;
  totalKharchTotal: number = 0;
  totalPetrolQuantity: number = 0;
  totalPetrolTotal: number = 0;
  totalPetrolVat: number = 0;
  totalPetrolCess: number = 0;
  totalPetrolJtcpercentage: number = 0;
  totalPetrolTotalPurchase: number = 0;
  totalDieselQuantity: number = 0;
  totalDieselTotal: number = 0;
  totalDieselVat: number = 0;
  totalDieselCess: number = 0;
  totalDieselJtcpercentage: number = 0;
  totalDieselTotalPurchase: number = 0;
  totalAmountTotal: number = 0;
  totalJamaTotal: number = 0;
  totalBakiTotal: number = 0;
  // XP Petrol Totals
  totalXpPetrolLtr: number = 0;
  totalXpPetrolTotalSum: number = 0;
  totalXpPetrolTotalSell: number = 0;
  totalXpPetrolQuantity: number = 0;
  totalXpPetrolTotal: number = 0;
  totalXpPetrolVat: number = 0;
  totalXpPetrolCess: number = 0;
  totalXpPetrolJtcpercentage: number = 0;
  totalXpPetrolTotalPurchase: number = 0;

  // Power Diesel Totals
  totalPowerDieselLtr: number = 0;
  totalPowerDieselTotalSum: number = 0;
  totalPowerDieselTotalSell: number = 0;
  totalPowerDieselQuantity: number = 0;
  totalPowerDieselTotal: number = 0;
  totalPowerDieselVat: number = 0;
  totalPowerDieselCess: number = 0;
  totalPowerDieselJtcpercentage: number = 0;
  totalPowerDieselTotalPurchase: number = 0;
  xp_petrol_nozzle: number;
  powe_diesel_nozzle: number;
  userId = localStorage.getItem("userId");

  constructor(
    private http: HttpClient,
    private use: UserServiceService,
    private dialog: MatDialog,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {
    this.startDate = data.startDate;
    this.endDate = data.endDate;
  }

  ngOnInit(): void {
    this.getPurchase();
    this.getUserName();
  }

  getUserName() {
    this.use.getUserNameAndNozzle(this.userId).subscribe((data) => {
      this.xp_petrol_nozzle = Number(data.data.xp_petrol_nozzle);
      this.powe_diesel_nozzle = Number(data.data.powe_diesel_nozzle);
    });
  }

  getPurchase() {
    const userId = localStorage.getItem("userId");
    const params = new HttpParams()
      .set("startDate", this.startDate.toString().split("T")[0])
      .set("endDate", this.endDate.toString().split("T")[0])
      .set("userId", userId);

    this.http
      .get<AggregatedDataDTO[]>(API_AGGREGATED_DATA, { params })
      .subscribe(
        (data) => {
          this.productList = data;
          this.calculateTotals();
        },
        (error) => {
          console.error("Error fetching data:", error);
        }
      );
  }

  calculateTotals() {
    this.totalPetrolSum = this.productList.reduce((sum, item) => {
      return sum + item.petrolTotalSum;
    }, 0);
    this.totalPetrolltr = this.productList.reduce(
      (sum, item) => sum + item.petrolLtr,
      0
    );
    this.totalPetroltotalsum = this.productList.reduce(
      (sum, item) => sum + item.petrolTotalTotalSell,
      0
    );
    this.totalDieselsum = this.productList.reduce(
      (sum, item) => sum + item.dieselTotalSum,
      0
    );
    this.totalDieselltr = this.productList.reduce(
      (sum, item) => sum + item.dieselLtr,
      0
    );
    this.totalDieseltotalSum = this.productList.reduce(
      (sum, item) => sum + item.dieselTotalTotalSell,
      0
    );

    this.totalOilTotalPrice = this.productList.reduce(
      (sum, item) => sum + item.oilTotalPrice,
      0
    );
    this.totalKharchTotal = this.productList.reduce(
      (sum, item) => sum + item.kharchTotal,
      0
    );
    this.totalPetrolQuantity = this.productList.reduce(
      (sum, item) => sum + item.petrolQuantity,
      0
    );
    this.totalPetrolTotal = this.productList.reduce(
      (sum, item) => sum + item.petrolTotal,
      0
    );
    this.totalPetrolVat = this.productList.reduce(
      (sum, item) => sum + item.petrolVat,
      0
    );
    this.totalPetrolCess = this.productList.reduce(
      (sum, item) => sum + item.petrolCess,
      0
    );
    this.totalPetrolJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.petrolJtcpercentage,
      0
    );
    this.totalPetrolTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.petrolTotalPurchase,
      0
    );
    this.totalDieselQuantity = this.productList.reduce(
      (sum, item) => sum + item.dieselQuantity,
      0
    );
    this.totalDieselTotal = this.productList.reduce(
      (sum, item) => sum + item.dieselTotal,
      0
    );
    this.totalDieselVat = this.productList.reduce(
      (sum, item) => sum + item.dieselVat,
      0
    );
    this.totalDieselCess = this.productList.reduce(
      (sum, item) => sum + item.dieselCess,
      0
    );
    this.totalDieselJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.dieselJtcpercentage,
      0
    );
    this.totalDieselTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.dieselTotalPurchase,
      0
    );
    this.totalAmountTotal = this.productList.reduce(
      (sum, item) => sum + item.amountTotal,
      0
    );
    this.totalJamaTotal = this.productList.reduce(
      (sum, item) => sum + item.jamaTotal,
      0
    );
    this.totalBakiTotal = this.productList.reduce(
      (sum, item) => sum + item.bakiTotal,
      0
    );
    // XP Petrol totals
    this.totalXpPetrolLtr = this.productList.reduce(
      (sum, item) => sum + item.xppetrolLtr,
      0
    );
    this.totalXpPetrolTotalSum = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotalSum,
      0
    );
    this.totalXpPetrolTotalSell = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotalSell,
      0
    );
    this.totalXpPetrolQuantity = this.productList.reduce(
      (sum, item) => sum + item.xppetrolQuantity,
      0
    );
    this.totalXpPetrolTotal = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotal,
      0
    );
    this.totalXpPetrolVat = this.productList.reduce(
      (sum, item) => sum + item.xppetrolVat,
      0
    );
    this.totalXpPetrolCess = this.productList.reduce(
      (sum, item) => sum + item.xppetrolCess,
      0
    );
    this.totalXpPetrolJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.xppetrolJtcpercentage,
      0
    );
    this.totalXpPetrolTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.xppetrolTotalPurchase,
      0
    );

    // Power Diesel totals
    this.totalPowerDieselLtr = this.productList.reduce(
      (sum, item) => sum + item.powerdieselLtr,
      0
    );
    this.totalPowerDieselTotalSum = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotalSum,
      0
    );
    this.totalPowerDieselTotalSell = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotalSell,
      0
    );
    this.totalPowerDieselQuantity = this.productList.reduce(
      (sum, item) => sum + item.powerdieselQuantity,
      0
    );
    this.totalPowerDieselTotal = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotal,
      0
    );
    this.totalPowerDieselVat = this.productList.reduce(
      (sum, item) => sum + item.powerdieselVat,
      0
    );
    this.totalPowerDieselCess = this.productList.reduce(
      (sum, item) => sum + item.powerdieselCess,
      0
    );
    this.totalPowerDieselJtcpercentage = this.productList.reduce(
      (sum, item) => sum + item.powerdieselJtcpercentage,
      0
    );
    this.totalPowerDieselTotalPurchase = this.productList.reduce(
      (sum, item) => sum + item.powerdieselTotalPurchase,
      0
    );
  }

  exportToExcel(): void {
    const totalsRow = {
      date: "Total",
      petrolTotalCloseMeter: "",
      petrolTotalOpenMeter: "",
      petrolTotalSum: this.totalPetrolSum,
      petrolTotalTesting: "",
      petrolLtr: this.totalPetrolltr,
      petrolRate: "",
      petrolTotalTotalSell: this.totalPetroltotalsum,
      dieselTotalCloseMeter: "",
      dieselTotalOpenMeter: "",
      dieselTotalSum: this.totalDieselsum,
      dieselTotalTesting: "",
      dieselLtr: this.totalDieselltr,
      dieselRate: "",
      dieselTotalTotalSell: this.totalDieseltotalSum,
      oilTotalPrice: this.totalOilTotalPrice,
      kharchTotal: this.totalKharchTotal,
      pType: "",
      petrolQuantity: this.totalPetrolQuantity,
      petrolTotal: this.totalPetrolTotal,
      petrolVat: this.totalPetrolVat,
      petrolCess: this.totalPetrolCess,
      petrolJtcpercentage: this.totalPetrolJtcpercentage,
      petrolTotalPurchase: this.totalPetrolTotalPurchase,
      dType: "",
      dieselQuantity: this.totalDieselQuantity,
      dieselTotal: this.totalDieselTotal,
      dieselVat: this.totalDieselVat,
      dieselCess: this.totalDieselCess,
      dieselJtcpercentage: this.totalDieselJtcpercentage,
      dieselTotalPurchase: this.totalDieselTotalPurchase,
      amountTotal: this.totalAmountTotal,
      jamaTotal: this.totalJamaTotal,
      bakiTotal: this.totalBakiTotal,
      xppetrolCloseMeter: "", // leave blank if not calculated
      xppetrolOpenMeter: "",
      xppetrolLtr: this.totalXpPetrolLtr,
      xppetrolTotalSum: this.totalXpPetrolTotalSum,
      xppetrolRate: "", 
      xppetrolTotalTesting: "",
      xppetrolTotalSell: this.totalXpPetrolTotalSell,
      xppetrolQuantity: this.totalXpPetrolQuantity,
      xppetrolTotal: this.totalXpPetrolTotal,
      xppetrolVat: this.totalXpPetrolVat,
      xppetrolCess: this.totalXpPetrolCess,
      xppetrolJtcpercentage: this.totalXpPetrolJtcpercentage,
      xppetrolTotalPurchase: this.totalXpPetrolTotalPurchase,

      // Power Diesel Totals
      powerdieselCloseMeter: "",
      powerdieselOpenMeter: "",
      powerdieselLtr: this.totalPowerDieselLtr,
      powerdieselTotalSum: this.totalPowerDieselTotalSum,
      powerdieselRate: "",
      powerdieselTotalTesting: "",
      powerdieselTotalSell: this.totalPowerDieselTotalSell,
      powerdieselQuantity: this.totalPowerDieselQuantity,
      powerdieselTotal: this.totalPowerDieselTotal,
      powerdieselVat: this.totalPowerDieselVat,
      powerdieselCess: this.totalPowerDieselCess,
      powerdieselJtcpercentage: this.totalPowerDieselJtcpercentage,
      powerdieselTotalPurchase: this.totalPowerDieselTotalPurchase,
    };

    const dataWithTotals = [...this.productList, totalsRow];

    // Define the headers you want in specific order
    const headerOrder = [
      "date",
      "petrolTotalCloseMeter",
      "petrolTotalOpenMeter",
      "petrolTotalSum",
      "petrolTotalTesting",
      "petrolLtr",
      "petrolRate",
      "petrolTotalTotalSell",
      "dieselTotalCloseMeter",
      "dieselTotalOpenMeter",
      "dieselTotalSum",
      "dieselTotalTesting",
      "dieselLtr",
      "dieselRate",
      "dieselTotalTotalSell",
      "oilTotalPrice",
      "kharchTotal",
      "pType",
      "petrolQuantity",
      "petrolTotal",
      "petrolVat",
      "petrolCess",
      "petrolJtcpercentage",
      "petrolTotalPurchase",
      "dType",
      "dieselQuantity",
      "dieselTotal",
      "dieselVat",
      "dieselCess",
      "dieselJtcpercentage",
      "dieselTotalPurchase",
      "amountTotal",
      "jamaTotal",
      "bakiTotal",
      "xppetrolCloseMeter",
      "xppetrolOpenMeter",
      "xppetrolLtr",
      "xppetrolRate",
      "xppetrolTotalSum",
      "xppetrolTotalTesting",
      "xppetrolTotalSell",
      "xppetrolQuantity",
      "xppetrolTotal",
      "xppetrolVat",
      "xppetrolCess",
      "xppetrolJtcpercentage",
      "xppetrolTotalPurchase",

      "powerdieselCloseMeter",
      "powerdieselOpenMeter",
      "powerdieselLtr",
      "powerdieselRate",
      "powerdieselTotalSum",
      "powerdieselTotalTesting",
      "powerdieselTotalSell",
      "powerdieselQuantity",
      "powerdieselTotal",
      "powerdieselVat",
      "powerdieselCess",
      "powerdieselJtcpercentage",
      "powerdieselTotalPurchase",
    ];

    // Map custom labels to headers (optional)
    const headerLabels = {
      date: "Date",
      petrolTotalCloseMeter: "Petrol Close Meter",
      petrolTotalOpenMeter: "Petrol Open Meter",
      petrolTotalSum: "Petrol Sum",
      petrolTotalTesting: "Petrol Testing",
      petrolLtr: "Petrol Liters",
      petrolRate: "Petrol Rate",
      petrolTotalTotalSell: "Petrol Total Sell",
      dieselTotalCloseMeter: "Diesel Close Meter",
      dieselTotalOpenMeter: "Diesel Open Meter",
      dieselTotalSum: "Diesel Sum",
      dieselTotalTesting: "Diesel Testing",
      dieselLtr: "Diesel Liters",
      dieselRate: "Diesel Rate",
      dieselTotalTotalSell: "Diesel Total Sell",
      oilTotalPrice: "Oil Total Price",
      kharchTotal: "Expenses Total",
      pType: "Petrol Type",
      petrolQuantity: "Petrol Quantity",
      petrolTotal: "Petrol Total",
      petrolVat: "Petrol VAT",
      petrolCess: "Petrol Cess",
      petrolJtcpercentage: "Petrol JTC %",
      petrolTotalPurchase: "Petrol Purchase Total",
      dType: "Diesel Type",
      dieselQuantity: "Diesel Quantity",
      dieselTotal: "Diesel Total",
      dieselVat: "Diesel VAT",
      dieselCess: "Diesel Cess",
      dieselJtcpercentage: "Diesel JTC %",
      dieselTotalPurchase: "Diesel Purchase Total",
      amountTotal: "Amount Total",
      jamaTotal: "Jama Total",
      bakiTotal: "Baki Total",
      xppetrolCloseMeter: "XP Petrol Close Meter",
      xppetrolOpenMeter: "XP Petrol Open Meter",
      xppetrolLtr: "XP Petrol Liters",
      xppetrolTotalSum: "XP Petrol Sum",
      xppetrolRate: "XP Petrol Rate",
      xppetrolTotalTesting: "XP Petrol Testing",
      xppetrolTotalSell: "XP Petrol Total Sell",
      xppetrolQuantity: "XP Petrol Quantity",
      xppetrolTotal: "XP Petrol Total",
      xppetrolVat: "XP Petrol VAT",
      xppetrolCess: "XP Petrol Cess",
      xppetrolJtcpercentage: "XP Petrol JTC %",
      xppetrolTotalPurchase: "XP Petrol Purchase Total",

      powerdieselCloseMeter: "Power Diesel Close Meter",
      powerdieselOpenMeter: "Power Diesel Open Meter",
      powerdieselLtr: "Power Diesel Liters",
      powerdieselTotalSum: "Power Diesel Sum",
      powerdieselRate: "Power Diesel Rate",
      powerdieselTotalTesting: "Power Diesel Testing",
      powerdieselTotalSell: "Power Diesel Total Sell",
      powerdieselQuantity: "Power Diesel Quantity",
      powerdieselTotal: "Power Diesel Total",
      powerdieselVat: "Power Diesel VAT",
      powerdieselCess: "Power Diesel Cess",
      powerdieselJtcpercentage: "Power Diesel JTC %",
      powerdieselTotalPurchase: "Power Diesel Purchase Total",
    

    };

    // Convert JSON to sheet with header order
    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(dataWithTotals, {
      header: headerOrder,
    });

    // Replace headers with custom labels
    const range = XLSX.utils.decode_range(worksheet["!ref"] || "");
    for (let C = range.s.c; C <= range.e.c; ++C) {
      const cell_address = { c: C, r: 0 };
      const cell_ref = XLSX.utils.encode_cell(cell_address);
      const originalHeader = worksheet[cell_ref]?.v;
      if (originalHeader && headerLabels[originalHeader]) {
        worksheet[cell_ref].v = headerLabels[originalHeader];
      }
    }

    const workbook: XLSX.WorkBook = {
      Sheets: { data: worksheet },
      SheetNames: ["data"],
    };

    XLSX.writeFile(workbook, "ProductList.xlsx");
  }
}


//////////////

export interface AggregatedDataDTO {
  date: string;
  PetrolTotalCloseMeter: number;
  petrolTotalOpenMeter: number;
  petrolTotalSum: number;
  petrolTotalTesting: number;
  petrolLtr: number;
  petrolRate: number;
  petrolTotalTotalSell: number;
  dieselTotalCloseMeter: number;
  dieselTotalOpenMeter: number;
  dieselTotalSum: number;
  dieselTotalTesting: number;
  dieselLtr: number;
  dieselRate: number;
  dieselTotalTotalSell: number;
  oilTotalPrice: number;
  kharchTotal: number;
  pType: String ;
  petrolQuantity: number;
  petrolTotal: number;
  petrolVat: number;
  petrolCess: number;
  petrolJtcpercentage: number;
  petrolTotalPurchase: number;
  dType: String ;
  dieselQuantity: number;
  dieselTotal: number;
  dieselVat: number;
  dieselCess: number;
  dieselJtcpercentage: number;
  dieselTotalPurchase: number;
  amountTotal: number;
  jamaTotal: number;
  bakiTotal: number;
  xppetrolCloseMeter: number;
  xppetrolOpenMeter: number;
  xppetrolLtr: number;
  xppetrolTotalSum: number;
  xppetrolTotalTesting: number;
  xppetrolTotalSell: number;

  powerdieselCloseMeter: number;
  powerdieselOpenMeter: number;
  powerdieselLtr: number;
  powerdieselTotalSum: number;
  powerdieselTotalTesting: number;
  powerdieselTotalSell: number;

 // ✅ New XP Petrol purchase fields
  xppetrolQuantity: number;
  xppetrolTotal: number;
  xppetrolVat: number;
  xppetrolCess: number;
  xppetrolJtcpercentage: number;
  xppetrolTotalPurchase: number;

  // ✅ New Power Diesel purchase fields
  powerdieselQuantity: number;
  powerdieselTotal: number;
  powerdieselVat: number;
  powerdieselCess: number;
  powerdieselJtcpercentage: number;
  powerdieselTotalPurchase: number;
}


/////////
 @GetMapping("/aggregated-data-alldata")
    public List<AggregatedDataDTO> getAggregatedData(
            @RequestParam String startDate,
            @RequestParam String endDate,
            @RequestParam String userId) {

        UserNozzleDTO userData = userRepository.getUserData(Long.parseLong(userId));

        boolean includeXpPetrol = userData != null
                && parseIntSafe(userData.getXp_petrol_nozzle()) > 0;

        boolean includePowerDiesel = userData != null
                && parseIntSafe(userData.getPowe_diesel_nozzle()) > 0;

        List<Map<String, Object>> myobj = queryThis(startDate, endDate, userId);
        List<AggregatedDataDTO> result = new ArrayList<>();
        for (Map<String, Object> map : myobj) {
            AggregatedDataDTO dto = new AggregatedDataDTO();
            dto.setDate((String) map.get("date"));
            dto.setPetrolTotalCloseMeter(convertToDouble(map.get("petrol_total_close_meter")));
            dto.setPetrolTotalOpenMeter(convertToDouble(map.get("petrol_total_open_meter")));
            dto.setPetrolTotalSum(convertToDouble(map.get("petrol_total_sum")));
            dto.setPetrolTotalTesting(convertToDouble(map.get("petrol_total_testing")));
            dto.setPetrolLtr(convertToDouble(map.get("petrol_ltr")));
            dto.setPetrolRate(convertToDouble(map.get("petrol_rate")));
            dto.setPetrolTotalTotalSell(convertToDouble(map.get("petrol_total_total_sell")));
            dto.setDieselTotalCloseMeter(convertToDouble(map.get("diesel_total_close_meter")));
            dto.setDieselTotalOpenMeter(convertToDouble(map.get("diesel_total_open_meter")));
            dto.setDieselTotalSum(convertToDouble(map.get("diesel_total_sum")));
            dto.setDieselTotalTesting(convertToDouble(map.get("diesel_total_testing")));
            dto.setDieselLtr(convertToDouble(map.get("diesel_ltr")));
            dto.setDieselRate(convertToDouble(map.get("diesel_rate")));
            dto.setDieselTotalTotalSell(convertToDouble(map.get("diesel_total_total_sell")));
            dto.setOilTotalPrice(convertToDouble(map.get("oil_total_price")));
            dto.setKharchTotal(convertToDouble(map.get("Kharch_Total")));
            dto.setpType((String) map.get("PType"));
            dto.setPetrolQuantity(convertToDouble(map.get("Petrol_Quantity")));
            dto.setPetrolTotal(convertToDouble(map.get("Petrol_Total")));
            dto.setPetrolVat(convertToDouble(map.get("Petrol_Vat")));
            dto.setPetrolCess(convertToDouble(map.get("Petrol_Cess")));
            dto.setPetrolJtcpercentage(convertToDouble(map.get("Petrol_Jtcpercentage")));
            dto.setPetrolTotalPurchase(convertToDouble(map.get("Petrol_Total_purchase")));
            dto.setdType((map.get("DType")).toString());
            dto.setDieselQuantity(convertToDouble(map.get("Diesel_Quantity")));
            dto.setDieselTotal(convertToDouble(map.get("Diesel_Total")));
            dto.setDieselVat(convertToDouble(map.get("Diesel_Vat")));
            dto.setDieselCess(convertToDouble(map.get("Diesel_Cess")));
            dto.setDieselJtcpercentage(convertToDouble(map.get("Diesel_Jtcpercentage")));
            dto.setDieselTotalPurchase(convertToDouble(map.get("Diesel_Total_Purchase")));
            dto.setAmountTotal(convertToDouble(map.get("Amount_Total")));
            dto.setJamaTotal(convertToDouble(map.get("Jama_Total")));
            dto.setBakiTotal(convertToDouble(map.get("Baki_Total")));
//            dto.setUser_id((String) map.get("user_id"));
            if (includeXpPetrol) {
                dto.setXppetrolCloseMeter(convertToDouble(map.get("xppetrol_close_meter")));
                dto.setXppetrolOpenMeter(convertToDouble(map.get("xppetrol_open_meter")));
                dto.setXppetrolLtr(convertToDouble(map.get("xppetrol_ltr")));
                dto.setXppetrolTotalSum(convertToDouble(map.get("xppetrol_total_sum")));
                dto.setXppetrolRate(convertToDouble(map.get("xppetrol_rate"))); 
                dto.setXppetrolTotalTesting(convertToDouble(map.get("xppetrol_total_testing")));
                dto.setXppetrolTotalSell(convertToDouble(map.get("xppetrol_total_sell")));
                
                // XP Petrol Purchase fields
                dto.setXppetrolQuantity(convertToDouble(map.get("xppetrol_quantity")));
                dto.setXppetrolTotal(convertToDouble(map.get("xppetrol_total")));
                dto.setXppetrolVat(convertToDouble(map.get("xppetrol_vat")));
                dto.setXppetrolCess(convertToDouble(map.get("xppetrol_cess")));
                dto.setXppetrolJtcpercentage(convertToDouble(map.get("xppetrol_jtcpercentage")));
                dto.setXppetrolTotalPurchase(convertToDouble(map.get("xppetrol_total_purchase")));
            }

            if (includePowerDiesel) {
                dto.setPowerdieselCloseMeter(convertToDouble(map.get("powerdiesel_close_meter")));
                dto.setPowerdieselOpenMeter(convertToDouble(map.get("powerdiesel_open_meter")));
                dto.setPowerdieselLtr(convertToDouble(map.get("powerdiesel_ltr")));
                dto.setPowerdieselTotalSum(convertToDouble(map.get("powerdiesel_total_sum")));
                dto.setPowerdieselRate(convertToDouble(map.get("powerdiesel_rate")));
                dto.setPowerdieselTotalTesting(convertToDouble(map.get("powerdiesel_total_testing")));
                dto.setPowerdieselTotalSell(convertToDouble(map.get("powerdiesel_total_sell")));
// Power Diesel Purchase fields
                dto.setPowerdieselQuantity(convertToDouble(map.get("powerdiesel_quantity")));
                dto.setPowerdieselTotal(convertToDouble(map.get("powerdiesel_total")));
                dto.setPowerdieselVat(convertToDouble(map.get("powerdiesel_vat")));
                dto.setPowerdieselCess(convertToDouble(map.get("powerdiesel_cess")));
                dto.setPowerdieselJtcpercentage(convertToDouble(map.get("powerdiesel_jtcpercentage")));
                dto.setPowerdieselTotalPurchase(convertToDouble(map.get("powerdiesel_total_purchase")));
            }
            result.add(dto);
        }
        return result;
    }
	
	
	
	
	/////////////////
	private List<Map<String, Object>> queryThis(String startDate, String endDate, String userId) {
        String sql = "SELECT "
                + "p.date, "
                + "COALESCE(p.total_close_meter, 0) AS petrol_total_close_meter, "
                + "COALESCE(p.total_open_meter, 0) AS petrol_total_open_meter, "
                + "COALESCE(p.total_sum, 0) AS petrol_total_sum, "
                + "COALESCE(p.total_testing, 0) AS petrol_total_testing, "
                + "COALESCE(p.petrol_ltr, 0) AS petrol_ltr, "
                + "COALESCE(p.rate, 0) AS petrol_rate, "
                + "COALESCE(p.total_total_sell, 0) AS petrol_total_total_sell, "
                + "COALESCE(d.total_close_meter, 0) AS diesel_total_close_meter, "
                + "COALESCE(d.total_open_meter, 0) AS diesel_total_open_meter, "
                + "COALESCE(d.total_sum, 0) AS diesel_total_sum, "
                + "COALESCE(d.total_testing, 0) AS diesel_total_testing, "
                + "COALESCE(d.diesel_ltr, 0) AS diesel_ltr, "
                + "COALESCE(d.rate, 0) AS diesel_rate, "
                + "COALESCE(d.total_total_sell, 0) AS diesel_total_total_sell, "
                // xppetrol
                + "COALESCE(xp.total_close_meter, 0) AS xppetrol_close_meter, "
                + "COALESCE(xp.total_open_meter, 0) AS xppetrol_open_meter, "
                + "COALESCE(xp.xppetrol_ltr, 0) AS xppetrol_ltr, "
                + "COALESCE(xp.total_sum, 0) AS xppetrol_total_sum, "
                + "COALESCE(xp.rate, 0) AS xppetrol_rate, "
                + "COALESCE(xp.total_testing, 0) AS xppetrol_total_testing, "
                + "COALESCE(xp.total_sell, 0) AS xppetrol_total_sell, "
                // powerdiesel
                + "COALESCE(pd.total_close_meter, 0) AS powerdiesel_close_meter, "
                + "COALESCE(pd.total_open_meter, 0) AS powerdiesel_open_meter, "
                + "COALESCE(pd.powerdiesel_ltr, 0) AS powerdiesel_ltr, "
                + "COALESCE(pd.total_sum, 0) AS powerdiesel_total_sum, "
                + "COALESCE(pd.rate, 0) AS powerdiesel_rate, "
                + "COALESCE(pd.total_testing, 0) AS powerdiesel_total_testing, "
                + "COALESCE(pd.total_sell, 0) AS powerdiesel_total_sell, "
                
                + "COALESCE(o.total_price, 0) AS oil_total_price, "
                + "COALESCE(k.Kharch_Total, 0) AS Kharch_Total, "
                + "COALESCE(pp.type, 0) AS PType, "
                + "COALESCE(pp.petrol_quantity, 0) AS Petrol_Quantity, "
                + "COALESCE(pp.petrol_total, 0) AS Petrol_Total, "
                + "COALESCE(pp.petrol_vat, 0) AS Petrol_Vat, "
                + "COALESCE(pp.petrol_cess, 0) AS Petrol_Cess, "
                + "COALESCE(pp.petrol_jtcpercentage, 0) AS Petrol_Jtcpercentage, "
                + "COALESCE(pp.petrol_total_purchase, 0) AS Petrol_Total_Purchase, "
                + "COALESCE(dp.type, 0) AS DType, "
                + "COALESCE(dp.diesel_quantity, 0) AS Diesel_Quantity, "
                + "COALESCE(dp.diesel_total, 0) AS Diesel_Total, "
                + "COALESCE(dp.diesel_vat, 0) AS Diesel_Vat, "
                + "COALESCE(dp.diesel_cess, 0) AS Diesel_Cess, "
                + "COALESCE(dp.diesel_jtcpercentage, 0) AS Diesel_Jtcpercentage, "
                + "COALESCE(dp.diesel_total_purchase, 0) AS Diesel_Total_Purchase, "
                + "COALESCE(t.Amount_Total, 0) AS Amount_Total, "
                + "COALESCE(j.Jama_Total, 0) AS Jama_Total, "
                + "COALESCE(j.Baki_Total, 0) AS Baki_Total, "
                //Xp
                + "COALESCE(xpp.xppetrol_quantity, 0) AS xppetrol_quantity, "
                + "COALESCE(xpp.xppetrol_total, 0) AS xppetrol_total, "
                + "COALESCE(xpp.xppetrol_cess, 0) AS xppetrol_cess, "
                + "COALESCE(xpp.xppetrol_jtcpercentage, 0) AS xppetrol_jtcpercentage, "
                + "COALESCE(xpp.xppetrol_total_purchase, 0) AS xppetrol_total_purchase, "
                + "COALESCE(xpp.xppetrol_vat, 0) AS xppetrol_vat, "
                //Power
                + "COALESCE(pdp.powerdiesel_quantity, 0) AS powerdiesel_quantity, "
                + "COALESCE(pdp.powerdiesel_total, 0) AS powerdiesel_total, "
                + "COALESCE(pdp.powerdiesel_cess, 0) AS powerdiesel_cess, "
                + "COALESCE(pdp.powerdiesel_jtcpercentage, 0) AS powerdiesel_jtcpercentage, "
                + "COALESCE(pdp.powerdiesel_total_purchase, 0) AS powerdiesel_total_purchase, "
                + "COALESCE(pdp.powerdiesel_vat, 0) AS powerdiesel_vat "
                + "FROM "
                + "(SELECT "
                + "date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(total) AS total_sum, "
                + "SUM(testing) AS total_testing, "
                + "SUM(petrol_ltr) AS petrol_ltr, "
                + "rate, "
                + "SUM(total_sell) AS total_total_sell "
                + "FROM "
                + "managment.petrolsell "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date, rate) p "
                + "JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(total) AS total_sum, "
                + "SUM(testing) AS total_testing, "
                + "SUM(diesel_ltr) AS diesel_ltr, "
                + "rate, "
                + "SUM(total_sell) AS total_total_sell "
                + "FROM "
                + "managment.dieselsell "
                + "WHERE "
                + "date BETWEEN  '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date, rate) d "
                + "ON "
                + "p.date = d.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(price) AS total_price "
                + "FROM "
                + "managment.OilSell "
                + "WHERE "
                + "date BETWEEN  '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) o "
                + "ON "
                + "p.date = o.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(price) AS Kharch_Total "
                + "FROM "
                + "managment.kharch "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) k "
                + "ON "
                + "p.date = k.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, type, "
                + "quantity AS petrol_quantity, "
                + "total AS petrol_total, "
                + "vat AS petrol_vat, "
                + "cess AS petrol_cess, "
                + "jtcpercentage AS petrol_jtcpercentage, "
                + "total_purchase AS petrol_total_purchase "
                + "FROM "
                + "managment.purchase "
                + "WHERE "
                + "type = 'petrol' AND user_id = '" + userId + "') pp " // Filter by userId
                + "ON "
                + "p.date = pp.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(amount) AS Amount_Total "
                + "FROM "
                + "managment.transaction "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) t "
                + "ON "
                + "p.date = t.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, type, "
                + "quantity AS diesel_quantity, "
                + "total AS diesel_total, "
                + "vat AS diesel_vat, "
                + "cess AS diesel_cess, "
                + "jtcpercentage AS diesel_jtcpercentage, "
                + "total_purchase AS diesel_total_purchase "
                + "FROM "
                + "managment.purchase "
                + "WHERE "
                + "type = 'diesel'  AND user_id = '" + userId + "') dp " // Filter by userId
                + "ON "
                + "d.date = dp.date "
                + "LEFT JOIN ("
                + "SELECT date, "
                + "extra_cess AS xppetrol_cess, "
                + "extra_jtcpercentage AS xppetrol_jtcpercentage, "
                + "extra_quantity AS xppetrol_quantity, "
                + "extra_total AS xppetrol_total, "
                + "extra_total_purchase AS xppetrol_total_purchase, "
                + "extra_vat AS xppetrol_vat "
                + "FROM managment.extrapurchases "
                + "WHERE extra_type = 'XP Petrol' "
                + "AND user_id = '" + userId + "' "
                + "AND date BETWEEN '" + startDate + "' AND '" + endDate + "'"
                + ") xpp ON p.date = xpp.date "
                + "LEFT JOIN ("
                + "SELECT date, "
                + "extra_cess AS powerdiesel_cess, "
                + "extra_jtcpercentage AS powerdiesel_jtcpercentage, "
                + "extra_quantity AS powerdiesel_quantity, "
                + "extra_total AS powerdiesel_total, "
                + "extra_total_purchase AS powerdiesel_total_purchase, "
                + "extra_vat AS powerdiesel_vat "
                + "FROM managment.extrapurchases "
                + "WHERE extra_type = 'Power Diesel' "
                + "AND user_id = '" + userId + "' "
                + "AND date BETWEEN '" + startDate + "' AND '" + endDate + "'"
                + ") pdp ON p.date = pdp.date "
                + "LEFT JOIN "
                + "(SELECT "
                + "date, "
                + "SUM(jama) AS Jama_Total, "
                + "SUM(baki) AS Baki_Total "
                + "FROM "
                + "managment.jamabakireport "
                + "WHERE "
                + "date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' " // Filter by userId
                + "GROUP BY "
                + "date) j "
                + "ON "
                + " p.date = j.date "
                + "LEFT JOIN (SELECT date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(xppetrol_ltr) AS xppetrol_ltr, "
                + "SUM(testing) AS total_testing, "
                + "SUM(total) AS total_sum, "
                + "SUM(total_sell) AS total_sell, "
                + "rate "
                + "FROM managment.xppetrol "
                + "WHERE date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date,rate) xp ON p.date = xp.date "
                // ✅ LEFT JOIN powerdiesel
                + "LEFT JOIN (SELECT date, "
                + "SUM(close_meter) AS total_close_meter, "
                + "SUM(open_meter) AS total_open_meter, "
                + "SUM(powerdiesel_ltr) AS powerdiesel_ltr, "
                + "SUM(testing) AS total_testing, "
                + "SUM(total) AS total_sum, "
                + "SUM(total_sell) AS total_sell, "
                + "rate "
                + "FROM managment.powerdiesel "
                + "WHERE date BETWEEN '" + startDate + "' AND '" + endDate + "' "
                + "AND user_id = '" + userId + "' "
                + "GROUP BY date,rate) pd ON p.date = pd.date "
                + "ORDER BY "
                + "p.date;";

        return jdbcTemplate.queryForList(sql);
    }
/////////////////
@JsonInclude(JsonInclude.Include.NON_NULL)
public class AggregatedDataDTO {

    private String date;
    private Double petrolTotalCloseMeter;
    private Double petrolTotalOpenMeter;
    private Double petrolTotalSum;
    private Double petrolTotalTesting;
    private Double petrolLtr;
    private Double petrolRate;
    private Double petrolTotalTotalSell;
    private Double dieselTotalCloseMeter;
    private Double dieselTotalOpenMeter;
    private Double dieselTotalSum;
    private Double dieselTotalTesting;
    private Double dieselLtr;
    private Double dieselRate;
    private Double dieselTotalTotalSell;
    private Double oilTotalPrice;
    private Double kharchTotal;
    private String pType;
    private Double petrolQuantity;
    private Double petrolTotal;
    private Double petrolVat;
    private Double petrolCess;
    private Double petrolJtcpercentage;
    private Double petrolTotalPurchase;
    private String dType;
    private Double dieselQuantity;
    private Double dieselTotal;
    private Double dieselVat;
    private Double dieselCess;
    private Double dieselJtcpercentage;
    private Double dieselTotalPurchase;
    private Double amountTotal;
    private Double jamaTotal;
    private Double bakiTotal;
    private String user_id;

    private Double xppetrolCloseMeter;
    private Double xppetrolOpenMeter;
    private Double xppetrolLtr;
    private Double xppetrolTotalSum;
    private Double xppetrolRate;
    private Double xppetrolTotalTesting;
    private Double xppetrolTotalSell;

    private Double powerdieselCloseMeter;
    private Double powerdieselOpenMeter;
    private Double powerdieselLtr;
    private Double powerdieselTotalSum;
    private Double powerdieselRate;
    private Double powerdieselTotalTesting;
    private Double powerdieselTotalSell;

    // For XP Petrol Purchases
    private Double xppetrolQuantity;
    private Double xppetrolTotal;
    private Double xppetrolVat;
    private Double xppetrolCess;
    private Double xppetrolJtcpercentage;
    private Double xppetrolTotalPurchase;

    // For Power Diesel Purchases
    private Double powerdieselQuantity;
    private Double powerdieselTotal;
    private Double powerdieselVat;
    private Double powerdieselCess;
    private Double powerdieselJtcpercentage;
    private Double powerdieselTotalPurchase;
///////////////////
  <button mat-raised-button color="primary" (click)="oilType()">OilType Add</button>
  
  oilType() {
    const dialogRef = this.dialog.open(OilListComponent, {
      width: "40%",
      height: "30%",
      disableClose: true,
    });

    dialogRef.afterClosed().subscribe((result) => {
      this.getoilList();
    });
  }
  ///////////////////////

<div class="input-container">
    <input [(ngModel)]="inputValue" placeholder="Enter text Oil Type" />
    <button (click)="logInput()">Add</button>
    <button (click)="cancel()">Cancel</button>
  </div>
  /////////
  .input-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin: 10px 0;
  }
  
  .input-container input {
    padding: 6px 12px;
    border: 1px solid #ccc;
    border-radius: 4px;
    flex: 1;
  }
  
  .input-container button {
    padding: 6px 12px;
    border: none;
    border-radius: 4px;
    background-color: #1976d2;
    color: white;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }
  
  .input-container button:hover {
    background-color: #1565c0;
  }
  
  .input-container button:nth-child(3) {
    background-color: #9e9e9e;
  }
  
  .input-container button:nth-child(3):hover {
    background-color: #757575;
  }
  ////////////////////////
  
  
  export class OilListComponent implements OnInit {

 
  isReload: boolean;
  inputValue: string = '';

  constructor(public dialogRef: MatDialogRef<OilListComponent>,
    private user:UserServiceService,private notificationService:NotificationService
  ) { }

  ngOnInit(): void {
  }

 logInput() {
  const payload = { oilSellList: this.inputValue };
  this.user.addOilType(payload).subscribe({
    next: res => {
      if (res) {
        this.notificationService.success("✅ Data saved successfully.");
        this.dialogRef.close({ isReload: this.isReload });
      }
    },
    error: (err) => console.error('Error saving:', err),
  });
 }

  cancel() {
    this.dialogRef.close({ isReload: this.isReload });
  }

}



//addOilType(payload: { oilSellList: string }) {
    return this.http.post(API_OILTYPE_ADD, payload);
  }
  
  //export const API_OILTYPE_ADD: string = `${prefix}/portal/api/addoilType`;
  
  
  
  
  
  @PostMapping(value = "/addoilType")
    public ResponseEntity<ApiResponse> saveOilType(@RequestBody OilsellList oilsellList) {
        oilsellListRepository.save(oilsellList);
        return ResponseEntity.ok(new ApiResponse("Data saved successfully."));
    }
////////////////////////////////////////////////////

.nav .nav {
    padding-left: 20px;
  }
  .caret {
    margin-left: auto;
  }
  

<div class="logo">
    <!-- <a class="simple-text logo-mini">
        <div class="logo-img">
            <img src="/assets/img/images.png"/>
        </div>
    </a> -->
    <a class="simple-text logo-normal">
        <div class="logo-img1">
            <img src="./assets/img/manager.png" />
        </div>
    </a>
</div>


<div class="sidebar-wrapper">
    <div *ngIf="isMobileMenu()">
        <form class="navbar-form">
            <span class="bmd-form-group">
                <div class="input-group no-border">
                    <input type="text" value="" class="form-control" placeholder="Search...">
                    <button mat-raised-button type="submit" class="btn btn-white btn-round btn-just-icon">
                        <i class="material-icons">search</i>
                        <div class="ripple-container"></div>
                    </button>
                </div>
            </span>
        </form>
        <ul class="nav navbar-nav nav-mobile-menu">
            <li class="nav-item">
                <a class="nav-link" href="javascript:void(0)">
                    <i class="material-icons">dashboard</i>
                    <p>
                        <span class="d-lg-none d-md-block">Stats</span>
                    </p>
                </a>
            </li>
            <!-- <li class="nav-item dropdown">
                <a class="nav-link" href="javascript:void(0)" id="navbarDropdownMenuLink" data-toggle="dropdown"
                    aria-haspopup="true" aria-expanded="false">
                    <i class="material-icons">notifications</i>
                    <span class="notification">5</span>
                    <p>
                        <span class="d-lg-none d-md-block">Some Actions</span>
                    </p>
                </a>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdownMenuLink">
                    <a class="dropdown-item" href="#">Mike John responded to your email</a>
                    <a class="dropdown-item" href="#">You have 5 new tasks</a>
                    <a class="dropdown-item" href="#">You're now friend with Andrew</a>
                    <a class="dropdown-item" href="#">Another Notification</a>
                    <a class="dropdown-item" href="#">Another One</a>
                </div>
            </li> -->

            <li class="nav-item">
                <a class="nav-link" href="javascript:void(0)">
                    <i class="material-icons">person</i>
                    <p>
                        <span class="d-lg-none d-md-block">Account</span>
                    </p>
                </a>
            </li>
        </ul>
    </div>
    <ul class="nav">
        <ng-container *ngFor="let menuItem of menuItems">
          
          <!-- Single route -->
          <li *ngIf="!menuItem.children" routerLinkActive="active" class="{{menuItem.class}} nav-item">
            <a class="nav-link" [routerLink]="[menuItem.path]">
              <i class="material-icons">{{ menuItem.icon }}</i>
              <p>{{ menuItem.title }}</p>
            </a>
          </li>
      
          <!-- Dropdown group -->
          <li *ngIf="menuItem.children" class="nav-item">
            <a class="nav-link" href="javascript:void(0)" (click)="menuItem.expanded = !menuItem.expanded">
              <i class="material-icons">{{ menuItem.icon }}</i>
              <p>
                {{ menuItem.title }}
                <b class="caret float-end"></b>
              </p>
            </a>
            <ul class="nav" *ngIf="menuItem.expanded">
              <li *ngFor="let child of menuItem.children" routerLinkActive="active" class="nav-item">
                <a class="nav-link" [routerLink]="[child.path]">
                  <i class="material-icons">{{ child.icon }}</i>
                  <p>{{ child.title }}</p>
                </a>
              </li>
            </ul>
          </li>
        </ng-container>
      </ul>
      
</div>



import { Component, OnInit } from '@angular/core';
import { UserServiceService } from 'app/services/user-service.service';
import PerfectScrollbar from 'perfect-scrollbar';

declare const $: any;
declare interface RouteInfo {
  path?: string;
  title: string;
  icon?: string;
  class?: string;
  children?: RouteInfo[]; // ✅ for nested menus
}

export const ROUTES: RouteInfo[] = [
  { path: '/User', title: 'User Master', icon: 'supervised_user_circle', class: '' },
  { path: '/dashboard', title: 'Dashboard', icon: 'dashboard', class: '' },
  { path: '/dailyReport', title: 'Daily Report', icon: 'picture_as_pdf', class: '' },
  { path: '/Report', title: 'Report', icon: 'picture_as_pdf', class: '' },

  {
    title: 'Petrol/Diesel',
    icon: 'local_gas_station',
    class: 'group',
    children: [
      { path: '/purchasedetails', title: 'Purchase Petrol & Diesel', icon: 'content_paste', class: '' },
      { path: '/petroldetails', title: 'Petrol Sales', icon: 'library_books', class: '' },
      { path: '/dieseldetails', title: 'Diesel Sales', icon: 'ev_station', class: '' },
      { path: '/Dipp', title: 'Petrol/Diesel Dip', icon: 'open_with', class: '' }
    ]
  },
  {
    title: 'Extra Petrol/Diesel',
    icon: 'local_gas_station',
    class: 'group',
    children: [
      { path: '/extraPurchasedetails', title: 'Extra Purchase Petrol & Diesel', icon: 'content_paste', class: '' },
      { path: '/XPpetrol', title: 'Extra Premium Petrol', icon: 'library_books', class: '' },
      { path: '/powerDiesel', title: 'Extra Premium Diesel', icon: 'ev_station', class: '' },
      { path: '/extraDipp', title: 'Extra Petrol/Diesel Dip', icon: 'open_with', class: '' }
    ]
  },

  { path: '/oilsell', title: 'OilSell', icon: 'meeting_room', class: '' },
  { path: '/Kharch', title: 'Indirect Expance', icon: 'money', class: '' },
  { path: '/atm', title: 'ATM & Cash', icon: 'money', class: '' },
  { path: '/Jama&Baki', title: 'Bill Credit & Debit', icon: 'money', class: '' },
  { path: '/feedback', title: 'User Feedback', icon: 'unarchive', class: '' },

  // { path: '/feedback', title: 'User Feedback', icon: 'unarchive', class: 'active-pro' },

  // { path: '/image', title: 'Image',  icon:'image', class: '' },
  // { path: '/map', title: 'Map',  icon:'map', class: '' },

];

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.css']
})
export class SidebarComponent implements OnInit {
  menuItems: any[];
  role: string = '';
  ps: any;

  constructor(private userService: UserServiceService) { }


  ngOnInit() {
    const userId = localStorage.getItem('userId');
    this.role = localStorage.getItem('role') || '';
  
    this.userService.getUserPump(userId).subscribe(response => {
      const data = response?.data || {};
  
      const xpPetrolEnabled = data?.xp_petrol_nozzle !== '0';
      const powerDieselEnabled = data?.powe_diesel_nozzle !== '0';
  
      // ✅ Step 1: Apply nozzle conditions
      let filteredRoutes = ROUTES.map(route => {
        if (route.children) {
          // ✅ Filter children first
          const filteredChildren = route.children.filter(child => {
            if (child.path === '/XPpetrol' && !xpPetrolEnabled) return false;
            if (child.path === '/powerDiesel' && !powerDieselEnabled) return false;
            if ((child.path === '/extraDipp' || child.path === '/extraPurchasedetails') &&
                !xpPetrolEnabled && !powerDieselEnabled) return false;
            return true;
          });
      
          // ✅ If no children left, remove the parent group too
          if (filteredChildren.length === 0) {
            return null;
          }
      
          return { ...route, children: filteredChildren };
        } else {
          // ✅ Single routes — filter directly
          if (route.path === '/XPpetrol' && !xpPetrolEnabled) return null;
          if (route.path === '/powerDiesel' && !powerDieselEnabled) return null;
          if ((route.path === '/extraDipp' || route.path === '/extraPurchasedetails') &&
              !xpPetrolEnabled && !powerDieselEnabled) return null;
          return route;
        }
      }).filter(Boolean); // ✅ Removes nulls from array
      
      
  
      // ✅ Step 2: Apply role-based filter *on top of* nozzle filter
      if (this.role === 'admin') {
        this.menuItems = filteredRoutes.filter(item => item.path === '/User');
      } else if (this.role === 'user') {
        this.menuItems = filteredRoutes.filter(item => item.path !== '/User');
      } else {
        this.menuItems = filteredRoutes;
      }
  
      // ✅ Step 3: Initialize scrollbar
      if (window.matchMedia(`(min-width: 960px)`).matches && !this.isMac()) {
        const elemSidebar = <HTMLElement>document.querySelector('.sidebar .sidebar-wrapper');
        this.ps = new PerfectScrollbar(elemSidebar);
      }
    });
  }
  
  isMobileMenu() {
    if ($(window).width() > 991) {
      return false;
    }
    return true;
  };
  updatePS(): void {
    if (window.matchMedia(`(min-width: 960px)`).matches && !this.isMac()) {
      this.ps.update();
    }
  }
  isMac(): boolean {
    let bool = false;
    if (navigator.platform.toUpperCase().indexOf('MAC') >= 0 || navigator.platform.toUpperCase().indexOf('IPAD') >= 0) {
      bool = true;
    }
    return bool;
  }
  expandOrCollapseMenu(id) {
    let parent = document.getElementById(id + "-p");
    let child = document.getElementById(id);
    parent.ariaExpanded = parent.ariaExpanded === "true" ? "false" : "true";
    child.style.height = child.style.height === "0px" || child.style.height === "" ? "100%" : "0";
  }
}
///////////////////////////////////////////
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" dir="ltr" prefix="og: https://ogp.me/ns#"
      xmlns:th="http://www.thymeleaf.org"
      style="width:100%;font-family:lato, 'helvetica neue', helvetica, arial, sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;padding:0;Margin:0">

<head>
    <meta charset="UTF-8"/>
    <meta content="width=device-width, initial-scale=1" name="viewport"/>
    <meta name="x-apple-disable-message-reformatting"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <meta content="telephone=no" name="format-detection"/>
    <title>Profit Loss</title>
        <style>
            table {
                width: 100%;
                border-collapse: collapse;
            }
            th, td {
                border: 1px solid black;
                padding: 8px;
                text-align: right;
            }
            th {
                background-color: yellow;
            }
            .left-align {
                text-align: left;

            }
            .highlight {
                background-color: #FFFF00; /* Yellow */
            }
        </style>
    </head>
    <body>
        <table>
            <thead>
                <tr>
                    <th class="left-align">Particulars</th>
                    <th>IT Return</th>
                    <th class="left-align">Particulars</th>
                    <th>IT Return</th>
                </tr>
                <tr>
                    <th colspan="6"></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="left-align">Opening Stock</td>
                    <td></td>
                    <td class="left-align">SALES ACCOUNT</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align">Diesel Stock</td>
                    <td th:text="${dieselstock}">0.0</td>
                    <td class="left-align">PETROL SALES A/C.</td>
                    <td th:text="${petrolSale}">0.0</td>
                </tr>
                <tr>
                    <td class="left-align">LUBRECANT</td>
                    <td></td>
                    <td class="left-align">DIESEL SALES A/C.</td>
                    <td th:text="${dieselSale}">0.0</td>

                </tr>
                <tr>
                    <td class="left-align">PETROL STOCK</td>
                    <td th:text="${petrolStock}">0.0</td>
                    <td class="left-align">LUBRICANT SALES A/C</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align">Purchase Accounts</td>
                    <td></td>
                    <td class="left-align">Closing stock</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align">DIESEL PURCHASE A/C.</td>
                    <td></td>
                    <td class="left-align">DIESEL STOCK</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align">LUB PURCHASE A/C.</td>
                    <td></td>
                    <td class="left-align">LUBRECANT</td>
                    <td ></td>
                </tr>
                <tr>
                    <td class="left-align">PETROL PURCHASES A/C.</td>
                    <td></td>
                    <td class="left-align">PETROL STOCK</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align">Direct Expenses</td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align">C GST EXP</td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align">S GST TAX EXP</td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <td class="left-align highlight">GROSS PROFIT C/O</td>
                    <td class="left-align highlight"></td>
                    <td class="left-align highlight">TOTAL</td>
                    <td class="left-align highlight"></td>
                </tr>
                <tr>
                    <td colspan="6"></td>
                </tr>
                <tr>
                    <td class="left-align">Indirect Expenses</td>
                    <td></td>
                    <td class="left-align">GROSS PROFIT C/O</td>
                    <td></td>
                </tr>
                <tr th:each="row : ${kharchList}">
                    <td th:text="${row[0]}">Expense</td>
                    <td th:text="${row[1]}">Price</td>
                    <td></td>
                    <td></td>
                </tr>
            </tbody>
        </table>

    </body>
</html>

////////////////////////////////////////

@Service
public class MyReportGenerator implements ProfitLossService {

    @Autowired
    private DailyskockRepository dailyskockRepository;

    @Autowired
    private DailydieselstockRepository dailydieselstockRepository;

    @Autowired
    private PetrolSellRepository petrolSellRepository;

    @Autowired
    private DieselSellRepository dieselSellRepository;

    @Autowired
    private kharchrepository kharchrepository;



    @Override
    public ResponseEntity<byte[]> generatePdf(String userId, String startDate, String endDate) throws ParseException {
        try {

            Double petrolStock = dailyskockRepository.getTotalOpenstockBetweenDates(startDate, endDate, userId);

            String dieselstock=dailydieselstockRepository.getTotalDieselOpenstockBetweenDates(startDate,endDate,userId);

            String petrolSale = petrolSellRepository.getTotalPetrolSellBetweenDates(startDate, endDate, userId);

            Double dieselSale = dieselSellRepository.getTotalDieselSellBetweenDates(startDate, endDate, userId);

            List<kharch> kharchList = kharchrepository.getExpenseDetails(startDate, endDate, userId);

            final Context ctx = new Context();

            ctx.setVariable("petrolStock", petrolStock);
            ctx.setVariable("dieselstock", dieselstock);
            ctx.setVariable("petrolSale", petrolSale);
            ctx.setVariable("dieselSale", dieselSale);
            ctx.setVariable("kharchList", kharchList);

            ClassLoaderTemplateResolver resolver = new ClassLoaderTemplateResolver();
            resolver.setPrefix("templates/");
            resolver.setSuffix(".html");
            resolver.setTemplateMode(TemplateMode.HTML);
            resolver.setCharacterEncoding("UTF-8");

            // 3. Process template
            TemplateEngine templateEngine = new TemplateEngine();
            templateEngine.setTemplateResolver(resolver);
            String html = templateEngine.process("ItReturn", ctx);

            // 4. Generate PDF
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            ITextRenderer renderer = new ITextRenderer();
            renderer.setDocumentFromString(html);
            renderer.layout();

            renderer.createPDF(outputStream);

            byte[] pdfBytes = outputStream.toByteArray();

            String desktopPath = System.getProperty("user.home") + "/Desktop/Personal/";
            String fileName = "Profit&Loss"+startDate +"to"+endDate+".pdf";
            Path outputPath = Paths.get(desktopPath + fileName);

            Files.createDirectories(outputPath.getParent());

            try {
                // Write PDF file
                Files.write(outputPath, pdfBytes);
            } catch (IOException ex) {
                Logger.getLogger(Utility.class.getName()).log(Level.SEVERE, null, ex);
            }
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.add("Content-Disposition", "attachment; filename=Profit&Loss.pdf");
            System.out.println("PDF saved to: " + outputPath.toAbsolutePath());
            return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
        } catch (IOException ex) {
            Logger.getLogger(MyReportGenerator.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(MyReportGenerator.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
}


@Query(value = "SELECT COALESCE(SUM(openstock), 0) FROM dailystock WHERE date BETWEEN :startDate AND :endDate AND user_id = :userId", nativeQuery = true)
    Double getTotalOpenstockBetweenDates(@Param("startDate") String startDate,
                                         @Param("endDate") String endDate,
                                         @Param("userId") String userId);


@Query("SELECT CAST(SUM(d.dieselopenstock) AS string) FROM dailydieselstock d WHERE d.date BETWEEN :startDate AND :endDate AND d.userId = :userId")
    String getTotalDieselOpenstockBetweenDates(@Param("startDate") String startDate,
                                               @Param("endDate") String endDate,
                                               @Param("userId") String userId);


@Query(value = "SELECT CONVERT(SUM(total_sell), CHAR) FROM PetrolSell WHERE date BETWEEN :startDate AND :endDate AND user_id = :userId", nativeQuery = true)
    String getTotalPetrolSellBetweenDates(@Param("startDate") String startDate,
                                          @Param("endDate") String endDate,
                                          @Param("userId") String userId);


@Query(value = "SELECT COALESCE(SUM(total_sell), 0) FROM Dieselsell WHERE date BETWEEN :startDate AND :endDate AND user_id = :userId", nativeQuery = true)
    Double getTotalDieselSellBetweenDates(@Param("startDate") String startDate,
                                          @Param("endDate") String endDate,
                                          @Param("userId") String userId);


@Query(value = "SELECT k.expenses, k.price FROM kharch k WHERE k.date BETWEEN :startDate AND :endDate AND k.userId = :userId")
    List<kharch> getExpenseDetails(@Param("startDate") String startDate,
                                       @Param("endDate") String endDate,
                                       @Param("userId") String userId);


									   
	
	
  
  
